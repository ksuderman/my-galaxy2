{"version":3,"sources":["../node_modules/phylocanvas/dist/phylocanvas.js","script.js"],"names":["_","extend","window","bundleEntries","load","options","chart","dataset","settings","$","ajax","url","download_url","success","content","tree","Phylocanvas","default","createTree","target","setTreeType","get","showLabels","alignLabels","branchColour","highlightColour","selectedColour","setNodeSize","setTextSize","lineWidth","showBootstrap","showInternalNodeLabels","internalLabelStyle","colour","font","textSize","on","e","node","getNodeAtMousePosition","branches","id","collapsed","draw","pruned","j","length","leaves","nodeShape","state","process","resolve","resize","fitInPanel","err","error"],"mappings":"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","file":"script.js","sourceRoot":"../src","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Phylocanvas\"] = factory();\n\telse\n\t\troot[\"Phylocanvas\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.utils = exports.nodeRenderers = exports.treeTypes = exports.Parser = exports.Tooltip = exports.Prerenderer = exports.Branch = exports.Tree = undefined;\n\n\tvar _Tree = __webpack_require__(1);\n\n\tvar _Tree2 = _interopRequireDefault(_Tree);\n\n\tvar _Branch = __webpack_require__(7);\n\n\tvar _Branch2 = _interopRequireDefault(_Branch);\n\n\tvar _Prerenderer = __webpack_require__(11);\n\n\tvar _Prerenderer2 = _interopRequireDefault(_Prerenderer);\n\n\tvar _Tooltip = __webpack_require__(27);\n\n\tvar _Tooltip2 = _interopRequireDefault(_Tooltip);\n\n\tvar _Parser = __webpack_require__(29);\n\n\tvar _Parser2 = _interopRequireDefault(_Parser);\n\n\tvar _treeTypes = __webpack_require__(8);\n\n\tvar _treeTypes2 = _interopRequireDefault(_treeTypes);\n\n\tvar _nodeRenderers = __webpack_require__(26);\n\n\tvar _nodeRenderers2 = _interopRequireDefault(_nodeRenderers);\n\n\tvar _utils = __webpack_require__(2);\n\n\tvar utils = _interopRequireWildcard(_utils);\n\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction decorate(object, fnName, fn) {\n\t  var target = object[fnName] ? object : object.prototype;\n\t  var originalFn = target[fnName];\n\n\t  target[fnName] = function () {\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    return fn.call(this, originalFn, args);\n\t  };\n\t}\n\n\t/**\n\t * The publicly exported module. Exports the following methods by default, and\n\t * contains named exports of internal classes, types, and utils.\n\t *\n\t * @module Phylocanvas\n\t */\n\n\texports.Tree = _Tree2.default;\n\texports.Branch = _Branch2.default;\n\texports.Prerenderer = _Prerenderer2.default;\n\texports.Tooltip = _Tooltip2.default;\n\texports.Parser = _Parser2.default;\n\texports.treeTypes = _treeTypes2.default;\n\texports.nodeRenderers = _nodeRenderers2.default;\n\texports.utils = utils;\n\n\t/**\n\t * Register a plugin.\n\t *\n\t * @param {function} pluginFn - Imported plugin module.\n\t */\n\n\tfunction plugin(pluginFn) {\n\t  pluginFn.call(this, decorate);\n\t}\n\n\t/**\n\t * A factory function for Phylocanvas instances to enable decoration by plugins.\n\t *\n\t * @param {string|HTMLElement} element - ID or element within which to place Phylocanvas instance.\n\t * @param {Object} config - Configuration object, properties are copied into the {@link Tree} object.\n\t *\n\t * @return An instance of {@link Tree}.\n\t */\n\tfunction createTree(element) {\n\t  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t  return new _Tree2.default(element, config);\n\t}\n\n\texports.default = { plugin: plugin, createTree: createTree };\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _utils = __webpack_require__(2);\n\n\tvar _Branch = __webpack_require__(7);\n\n\tvar _Branch2 = _interopRequireDefault(_Branch);\n\n\tvar _Tooltip = __webpack_require__(27);\n\n\tvar _treeTypes = __webpack_require__(8);\n\n\tvar _treeTypes2 = _interopRequireDefault(_treeTypes);\n\n\tvar _parsers = __webpack_require__(28);\n\n\tvar _parsers2 = _interopRequireDefault(_parsers);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tvar addClass = _utils.dom.addClass,\n\t    setCursorDrag = _utils.dom.setCursorDrag,\n\t    setCursorDragging = _utils.dom.setCursorDragging;\n\tvar fireEvent = _utils.events.fireEvent,\n\t    addEvent = _utils.events.addEvent,\n\t    removeEvent = _utils.events.removeEvent;\n\tvar getPixelRatio = _utils.canvas.getPixelRatio,\n\t    translateClick = _utils.canvas.translateClick;\n\tvar Predicates = _utils.constants.Predicates;\n\n\t/**\n\t * A Phylocanvas instance.\n\t *\n\t * @class\n\t * @see module:Phylocanvas~createTree\n\t */\n\n\tvar Tree = function () {\n\t  /**\n\t   * @constructor\n\t   * @param {string|HTMLElement} element\n\t   * @param {Object} config\n\t   */\n\t  function Tree(element) {\n\t    var _this = this;\n\n\t    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t    _classCallCheck(this, Tree);\n\n\t    this._point = { x: 0, y: 0 };\n\n\t    /**\n\t     * Places the instance in the DOM. Events are triggered from here.\n\t     *\n\t     * @type HTMLElement\n\t     */\n\t    this.containerElement = typeof element === 'string' ? document.getElementById(element) : element;\n\n\t    addClass(this.containerElement, 'pc-container');\n\n\t    /**\n\t     * Dictionary of {@link Branch} objects indexed by ID.\n\t     *\n\t     * @type {Object.<string, Branch>}\n\t     */\n\t    this.branches = {};\n\n\t    /**\n\t     * List of leaves.\n\t     *\n\t     * @type Array.<Branch>\n\t     */\n\t    this.leaves = [];\n\n\t    /**\n\t     * The root node of the tree\n\t     * (not neccesarily a root in the Phylogenetic sense)\n\t     *\n\t     * @type Branch\n\t     */\n\t    this.root = false;\n\n\t    /**\n\t     * Stores the unparsed tree.\n\t     *\n\t     * @type string\n\t     */\n\t    this.stringRepresentation = '';\n\n\t    /**\n\t     * Colour the branches of the tree based on the colour of the tips.\n\t     *\n\t     * @type boolean\n\t     */\n\t    this.backColour = false;\n\n\t    /**\n\t     * Stores the state of the tree after parsing.\n\t     *\n\t     * @type Object\n\t     */\n\t    this.originalTree = {};\n\n\t    // Set up the element and canvas\n\t    if (window.getComputedStyle(this.containerElement).position === 'static') {\n\t      this.containerElement.style.position = 'relative';\n\t    }\n\t    this.containerElement.style.boxSizing = 'border-box';\n\n\t    var canvasElement = document.createElement('canvas');\n\t    canvasElement.id = (this.containerElement.id || '') + '__canvas';\n\t    canvasElement.className = 'phylocanvas';\n\t    canvasElement.style.position = 'relative';\n\t    canvasElement.height = element.offsetHeight || 400;\n\t    canvasElement.width = element.offsetWidth || 400;\n\t    canvasElement.style.zIndex = '1';\n\t    this.containerElement.appendChild(canvasElement);\n\n\t    /**\n\t     * Canvas drawing context.\n\t     *\n\t     * @type CanvasRenderingContext2D\n\t     */\n\t    this.canvas = canvasElement.getContext('2d');\n\t    this.canvas.canvas.onselectstart = function () {\n\t      return false;\n\t    };\n\t    this.canvas.fillStyle = '#000000';\n\t    this.canvas.strokeStyle = '#000000';\n\t    this.canvas.save();\n\n\t    /**\n\t     * Colour for collapsed sections of the tree.\n\t     *\n\t     * @type string\n\t     */\n\t    this.collapsedColour = 'rgba(0, 0, 0, 0.5)';\n\n\t    /**\n\t     * A minimum and maximum number of child branches within which to\n\t     * automatically collapse branches on the first draw.\n\t     *\n\t     * @type object\n\t     * @property {number} min\n\t     * @property {number} max\n\t     */\n\t    this.defaultCollapsed = {};\n\n\t    /**\n\t     * The default tooltip showing number of child branches.\n\t     *\n\t     * @type Tooltip\n\t     */\n\t    this.tooltip = new _Tooltip.ChildNodesTooltip(this);\n\n\t    /**\n\t     * Has Tree been drawn already, true after first draw.\n\t     *\n\t     * @type boolean\n\t     */\n\t    this.drawn = false;\n\n\t    /**\n\t     * Stores highlighting functions used during drawing.\n\t     *\n\t     * @type Array.<Function>\n\t     */\n\t    this.highlighters = [];\n\n\t    /**\n\t     * The current level of zoom.\n\t     *\n\t     * @type number\n\t     */\n\t    this.zoom = 1;\n\n\t    /**\n\t     * Controls the speed of zooming. Recommended values are between 1 and 5.\n\t     *\n\t     * @type number\n\t     * @default\n\t     */\n\t    this.zoomFactor = 3;\n\n\t    /**\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.disableZoom = false;\n\n\t    /**\n\t     * Force rectangular and hierarchical trees to use the canvas dimensions\n\t     * instead of the number of leaves for proportion at the prerender stage.\n\t     *\n\t     * @type boolean\n\t     */\n\t    this.fillCanvas = false;\n\n\t    /**\n\t     * Enable branch scaling.\n\t     *\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.branchScaling = true;\n\n\t    /**\n\t     * The current branch scale.\n\t     *\n\t     * @type number\n\t     */\n\t    this.currentBranchScale = 1;\n\n\t    /**\n\t     * The ratio at which branches scale.\n\t     *\n\t     * @type number\n\t     */\n\t    this.branchScalingStep = 1.2;\n\n\t    /**\n\t     * Whether a click has been detected.\n\t     *\n\t     * @type boolean\n\t     */\n\t    this.pickedup = false;\n\n\t    /**\n\t     * Whether the user is dragging.\n\t     *\n\t     * @type boolean\n\t     */\n\t    this.dragging = false;\n\n\t    /**\n\t     * The starting x coordinate of a drag.\n\t     *\n\t     * @type number\n\t     */\n\t    this.startx = null;\n\t    /**\n\t     * The starting y coordinate of a drag.\n\t     *\n\t     * @type number\n\t     */\n\t    this.starty = null;\n\n\t    /**\n\t     * Factor with which to scale the radius of a leaf.\n\t     *\n\t     * @type number\n\t     * @default\n\t     */\n\t    this.baseNodeSize = 1;\n\n\t    /**\n\t     * Caches the offsetx when a click is detected.\n\t     *\n\t     * @type number\n\t     */\n\t    this.origx = null;\n\t    /**\n\t     * Caches the offsety when a click is detected.\n\t     *\n\t     * @type number\n\t     */\n\t    this.origy = null;\n\n\t    /**\n\t     * The x coordinate from which to begin drawing from.\n\t     *\n\t     * @type number\n\t     */\n\t    this.offsetx = this.canvas.canvas.width / 2;\n\t    /**\n\t     * The y coordinate from which to begin drawing from.\n\t     *\n\t     * @type number\n\t     */\n\t    this.offsety = this.canvas.canvas.height / 2;\n\n\t    /**\n\t     * The colour to apply to a selected branch.\n\t     *\n\t     * @type string\n\t     * @default\n\t     */\n\t    this.selectedColour = 'rgba(49,151,245,1)';\n\n\t    /**\n\t     * The colour to apply to a hihglighted branch.\n\t     *\n\t     * @type string\n\t     * @default\n\t     */\n\t    this.highlightColour = 'rgba(49,151,245,1)';\n\n\t    /**\n\t     * The line width of the halo on a highlighted branch.\n\t     *\n\t     * @type number\n\t     * @default\n\t     */\n\t    this.highlightWidth = 4;\n\n\t    /**\n\t     * Scale factor for the size of the the halo on a highlighted branch.\n\t     *\n\t     * @type number\n\t     * @default\n\t     */\n\t    this.highlightSize = 2;\n\n\t    /**\n\t     * Global branch colour,\n\t     *\n\t     * @type string\n\t     * @default\n\t     */\n\t    this.branchColour = 'rgba(0,0,0,1)';\n\n\t    /**\n\t     * Scale factor applied to branch lengths defined in the serialised\n\t     * representation of the tree.\n\t     *\n\t     * @type number\n\t     */\n\t    this.branchScalar = 1.0;\n\n\t    /**\n\t     * Space to add to bounds when fitting the tree to the canvas.\n\t     *\n\t     * @type number\n\t     * @default\n\t     */\n\t    this.padding = 50;\n\n\t    /**\n\t     * Space between a leaf and its label.\n\t     *\n\t     * @type number\n\t     * @default\n\t     */\n\t    this.labelPadding = 5;\n\n\t    /**\n\t     * Enable/disable shift-click multi-selection.\n\t     *\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.multiSelect = true;\n\n\t    /**\n\t     * Flag to change on branch when clicked.\n\t     *\n\t     * @type string\n\t     * @default\n\t     */\n\t    this.clickFlag = 'selected';\n\n\t    /**\n\t     * Decide if a branch should be affected when clicked.\n\t     *\n\t     * @type function\n\t     *\n\t     * @param {Branch} branch\n\t     * @param {string} property\n\t     * @param {} value\n\t     *\n\t     * @return boolean\n\t     * @default A function returning true.\n\t     */\n\t    this.clickFlagPredicate = Predicates.tautology;\n\n\t    /**\n\t     * Show labels when hovering over node.\n\t     *\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.hoverLabel = false;\n\n\t    /**\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.internalNodesSelectable = true;\n\n\t    /**\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.showLabels = true;\n\n\t    /**\n\t     * Global show/hide branch-length labels.\n\t     *\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.showBranchLengthLabels = false;\n\t    /**\n\t     * Conditionally display branch-length labels when enabled.\n\t     *\n\t     * @type function\n\t     * @param {Branch} node\n\t     * @default\n\t     */\n\t    this.branchLengthLabelPredicate = Predicates.tautology;\n\n\t    /**\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.showInternalNodeLabels = false;\n\n\t    /**\n\t     * Global style for internal labels on branches.\n\t     *\n\t     * @type object\n\t     * @property {string} colour\n\t     * @property {number} textSize\n\t     * @property {string} font\n\t     * @property {string} format - e.g. bold, italic\n\t     */\n\t    this.internalLabelStyle = {\n\t      colour: this.branchColour,\n\t      textSize: this.textSize,\n\t      font: this.font,\n\t      format: ''\n\t    };\n\n\t    this.setTreeType('radial');\n\n\t    /**\n\t     * Stores the length of the longest branch on the tree.\n\t     *\n\t     * @type number\n\t     */\n\t    this.maxBranchLength = 0;\n\n\t    /**\n\t     * The visible width of the branches.\n\t     *\n\t     * @type number\n\t     * @default\n\t     */\n\t    this.lineWidth = 1.0;\n\n\t    /**\n\t     * The size of the labels, scaled to the size of the tree on first draw.\n\t     *\n\t     * @type number\n\t     */\n\t    this.textSize = 7;\n\n\t    /**\n\t     * The font of the labels.\n\t     *\n\t     * @type string\n\t     */\n\t    this.font = 'sans-serif';\n\n\t    /**\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.unselectOnClickAway = true;\n\n\t    /**\n\t     * X coordinate of node that is furthest from the root.\n\t     *\n\t     * @type number\n\t     */\n\t    this.farthestNodeFromRootX = 0;\n\t    /**\n\t     * Y coordinate of node that is furthest from the root.\n\t     *\n\t     * @type number\n\t     */\n\t    this.farthestNodeFromRootY = 0;\n\n\t    /**\n\t     * Require the 'shift' key to be depressed to allow dragging\n\t     */\n\t    this.shiftKeyDrag = false;\n\n\t    /**\n\t     * Maximum length of label for each tree type.\n\t     *\n\t     * @type Object.<string, number>\n\t     */\n\t    this.maxLabelLength = {};\n\n\t    // Override properties from config\n\t    Object.assign(this, config);\n\n\t    this.resizeToContainer();\n\n\t    /**\n\t     * Event listener cache.\n\t     *\n\t     * @type object\n\t     */\n\t    this.eventListeners = {};\n\n\t    /**\n\t     * Default event listeners. Listeners passed in `config.eventListeners` will\n\t     * overwrite the listener of the same type.\n\t     */\n\t    var eventListeners = Object.assign({\n\t      click: { listener: this.clicked.bind(this) },\n\t      mousedown: { listener: this.pickup.bind(this) },\n\t      mouseup: { listener: this.drop.bind(this) },\n\t      mouseout: { listener: this.drop.bind(this) },\n\t      mousemove: {\n\t        target: this.canvas.canvas,\n\t        listener: this.drag.bind(this)\n\t      },\n\t      mousewheel: {\n\t        target: this.canvas.canvas,\n\t        listener: this.scroll.bind(this)\n\t      },\n\t      DOMMouseScroll: {\n\t        target: this.canvas.canvas,\n\t        listener: this.scroll.bind(this)\n\t      },\n\t      resize: {\n\t        target: window,\n\t        listener: function listener() {\n\t          _this.resizeToContainer();\n\t          _this.draw();\n\t        }\n\t      }\n\t    }, config.eventListeners || {});\n\n\t    var _iteratorNormalCompletion = true;\n\t    var _didIteratorError = false;\n\t    var _iteratorError = undefined;\n\n\t    try {\n\t      for (var _iterator = Object.keys(eventListeners)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t        var event = _step.value;\n\t        var _eventListeners$event = eventListeners[event],\n\t            listener = _eventListeners$event.listener,\n\t            target = _eventListeners$event.target;\n\n\t        this.addListener(event, listener, target);\n\t      }\n\t    } catch (err) {\n\t      _didIteratorError = true;\n\t      _iteratorError = err;\n\t    } finally {\n\t      try {\n\t        if (!_iteratorNormalCompletion && _iterator.return) {\n\t          _iterator.return();\n\t        }\n\t      } finally {\n\t        if (_didIteratorError) {\n\t          throw _iteratorError;\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Removes events defined in this.eventListeners. Useful for cleaning up.\n\t   */\n\n\n\t  _createClass(Tree, [{\n\t    key: 'removeEventListeners',\n\t    value: function removeEventListeners() {\n\t      var _iteratorNormalCompletion2 = true;\n\t      var _didIteratorError2 = false;\n\t      var _iteratorError2 = undefined;\n\n\t      try {\n\t        for (var _iterator2 = Object.keys(this.eventListeners)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t          var event = _step2.value;\n\t          var _iteratorNormalCompletion3 = true;\n\t          var _didIteratorError3 = false;\n\t          var _iteratorError3 = undefined;\n\n\t          try {\n\t            for (var _iterator3 = this.eventListeners[event][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t              var def = _step3.value;\n\t              var target = def.target,\n\t                  listener = def.listener;\n\n\t              removeEvent(target || this.containerElement, event, listener);\n\t            }\n\t          } catch (err) {\n\t            _didIteratorError3 = true;\n\t            _iteratorError3 = err;\n\t          } finally {\n\t            try {\n\t              if (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t                _iterator3.return();\n\t              }\n\t            } finally {\n\t              if (_didIteratorError3) {\n\t                throw _iteratorError3;\n\t              }\n\t            }\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError2 = true;\n\t        _iteratorError2 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t            _iterator2.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError2) {\n\t            throw _iteratorError2;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    /**\n\t     * Set/get if labels are currently aligned.\n\t     *\n\t     * @type boolean\n\t     */\n\n\t  }, {\n\t    key: 'setInitialCollapsedBranches',\n\n\n\t    /**\n\t     * Collapses branches based on {@link Tree#defaultCollapsed}.\n\t     *\n\t     * @param {Branch} [node=this.root]\n\t     */\n\t    value: function setInitialCollapsedBranches() {\n\t      var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root;\n\n\t      var childIds;\n\t      var i;\n\n\t      childIds = node.getChildProperties('id');\n\t      if (childIds && childIds.length > this.defaultCollapsed.min && childIds.length < this.defaultCollapsed.max) {\n\t        node.collapsed = true;\n\t        return;\n\t      }\n\n\t      for (i = 0; i < node.children.length; i++) {\n\t        this.setInitialCollapsedBranches(node.children[i]);\n\t      }\n\t    }\n\n\t    /**\n\t     * @param {MouseEvent} event\n\t     * @returns {Branch}\n\t     */\n\n\t  }, {\n\t    key: 'getNodeAtMousePosition',\n\t    value: function getNodeAtMousePosition(event) {\n\t      var _root;\n\n\t      return (_root = this.root).clicked.apply(_root, _toConsumableArray(translateClick(event, this)));\n\t    }\n\n\t    /**\n\t     * @returns {Branch[]} Selected leaves\n\t     */\n\n\t  }, {\n\t    key: 'getSelectedNodeIds',\n\t    value: function getSelectedNodeIds() {\n\t      return this.getNodeIdsWithFlag('selected');\n\t    }\n\n\t    /**\n\t     * @param {string} flag - A boolean property of the branch\n\t     * @param {boolean} [value=true]\n\t     * @returns {Branch[]}\n\t     */\n\n\t  }, {\n\t    key: 'getNodeIdsWithFlag',\n\t    value: function getNodeIdsWithFlag(flag) {\n\t      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n\t      return this.leaves.reduce(function (memo, leaf) {\n\t        if (leaf[flag] === value) {\n\t          memo.push(leaf.id);\n\t        }\n\t        return memo;\n\t      }, []);\n\t    }\n\n\t    /**\n\t     * Event listener for click events.\n\t     *\n\t     * @param {MouseEvent} e\n\t     */\n\n\t  }, {\n\t    key: 'clicked',\n\t    value: function clicked(e) {\n\t      var node;\n\t      if (e.button === 0) {\n\t        var nodeIds = [];\n\t        // if this is triggered by the release after a drag then the click\n\t        // shouldn't be triggered.\n\t        if (this.dragging) {\n\t          this.dragging = false;\n\t          return;\n\t        }\n\n\t        if (!this.root) return false;\n\t        node = this.getNodeAtMousePosition(e);\n\t        var isMultiSelectActive = this.multiSelect && (e.metaKey || e.ctrlKey);\n\t        if (node && node.interactive) {\n\t          if (isMultiSelectActive) {\n\t            if (node.leaf) {\n\t              node[this.clickFlag] = !node[this.clickFlag];\n\t            } else if (this.internalNodesSelectable) {\n\t              var someUnflagged = node.getChildProperties(this.clickFlag).some(function (prop) {\n\t                return prop === false;\n\t              });\n\t              node.cascadeFlag(this.clickFlag, someUnflagged, this.clickFlagPredicate);\n\t            }\n\t            nodeIds = this.getNodeIdsWithFlag(this.clickFlag);\n\t            this.draw();\n\t          } else {\n\t            this.root.cascadeFlag(this.clickFlag, false, this.clickFlagPredicate);\n\t            if (this.internalNodesSelectable || node.leaf) {\n\t              node.cascadeFlag(this.clickFlag, true, this.clickFlagPredicate);\n\t              nodeIds = node.getChildProperties('id');\n\t            }\n\t            this.draw();\n\t          }\n\t        } else if (this.unselectOnClickAway && !this.dragging && !isMultiSelectActive) {\n\t          this.root.cascadeFlag(this.clickFlag, false, this.clickFlagPredicate);\n\t          this.draw();\n\t        }\n\n\t        if (!this.pickedup) {\n\t          this.dragging = false;\n\t        }\n\n\t        this.nodesUpdated(nodeIds, this.clickFlag);\n\t      }\n\t    }\n\n\t    /**\n\t     * Handles dragging and hovering.\n\t     *\n\t     * @param {MouseEvent} event\n\t     */\n\n\t  }, {\n\t    key: 'drag',\n\t    value: function drag(event) {\n\t      // get window ratio\n\t      var ratio = getPixelRatio(this.canvas);\n\n\t      if (!this.drawn) return false;\n\n\t      if (this.pickedup) {\n\t        var xmove = (event.clientX - this.startx) * ratio;\n\t        var ymove = (event.clientY - this.starty) * ratio;\n\t        if (Math.abs(xmove) + Math.abs(ymove) > 5) {\n\t          this.dragging = true;\n\t          this.offsetx = this.origx + xmove;\n\t          this.offsety = this.origy + ymove;\n\t          this.draw();\n\t        }\n\t      } else {\n\t        // hover\n\t        var e = event;\n\t        var nd = this.getNodeAtMousePosition(e);\n\n\t        if (nd && nd.interactive && (this.internalNodesSelectable || nd.leaf)) {\n\t          this.root.cascadeFlag('hovered', false);\n\t          nd.hovered = true;\n\t          // For mouseover tooltip to show no. of children on the internal nodes\n\t          if (!nd.leaf && !nd.hasCollapsedAncestor()) {\n\t            this.tooltip.open(e.clientX, e.clientY, nd);\n\t          }\n\t          this.containerElement.style.cursor = 'pointer';\n\t        } else {\n\t          this.tooltip.close();\n\t          this.root.cascadeFlag('hovered', false);\n\t          if (this.shiftKeyDrag && e.shiftKey) {\n\t            setCursorDrag(this.containerElement);\n\t          } else {\n\t            this.containerElement.style.cursor = 'auto';\n\t          }\n\t        }\n\t        this.draw();\n\t      }\n\t    }\n\n\t    /**\n\t     * Draws the frame.\n\t     *\n\t     * @param {boolean} forceRedraw - Also run the prerenderer.\n\t     */\n\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(forceRedraw) {\n\t      this.highlighters.length = 0;\n\n\t      if (this.maxBranchLength === 0) {\n\t        this.loadError(new Error('All branches in the tree are identical.'));\n\t        return;\n\t      }\n\n\t      this.canvas.clearRect(0, 0, this.canvas.canvas.width, this.canvas.canvas.height);\n\t      this.canvas.lineCap = 'round';\n\t      this.canvas.lineJoin = 'round';\n\n\t      this.canvas.strokeStyle = this.branchColour;\n\t      this.canvas.save();\n\n\t      if (!this.drawn || forceRedraw) {\n\t        this.prerenderer.run(this);\n\t        if (!forceRedraw) {\n\t          this.fitInPanel();\n\t        }\n\t      }\n\t      var pixelRatio = getPixelRatio(this.canvas);\n\t      this.canvas.lineWidth = this.lineWidth / this.zoom;\n\t      this.canvas.translate(this.offsetx * pixelRatio, this.offsety * pixelRatio);\n\t      this.canvas.scale(this.zoom, this.zoom);\n\t      this.branchRenderer.render(this, this.root);\n\n\t      this.highlighters.forEach(function (render) {\n\t        return render();\n\t      });\n\n\t      this.drawn = true;\n\n\t      this.canvas.restore();\n\t    }\n\n\t    /**\n\t     * Mousedown event listener\n\t     *\n\t     * @param {MouseEvent} event\n\t     */\n\n\t  }, {\n\t    key: 'pickup',\n\t    value: function pickup(event) {\n\t      if (!this.shiftKeyDrag || event.shiftKey) {\n\t        if (!this.drawn) return false;\n\t        this.origx = this.offsetx;\n\t        this.origy = this.offsety;\n\n\t        if (event.button === 0) {\n\t          this.pickedup = true;\n\t          setCursorDragging(this.containerElement);\n\t        }\n\n\t        this.startx = event.clientX;\n\t        this.starty = event.clientY;\n\t      }\n\t    }\n\n\t    /**\n\t     * mouseup event listener.\n\t     */\n\n\t  }, {\n\t    key: 'drop',\n\t    value: function drop(event) {\n\t      if (!this.drawn) return false;\n\t      this.pickedup = false;\n\t      if (this.shiftKeyDrag && event.shiftKey) {\n\t        setCursorDrag(this.containerElement);\n\t      } else {\n\t        this.containerElement.style.cursor = 'auto';\n\t      }\n\t    }\n\n\t    /**\n\t     * Mousewheel event listener.\n\t     *\n\t     * @param event\n\t     */\n\n\t  }, {\n\t    key: 'scroll',\n\t    value: function scroll(event) {\n\t      if (this.disableZoom || 'wheelDelta' in event && event.wheelDelta === 0) {\n\t        return;\n\t      }\n\n\t      event.preventDefault();\n\n\t      this._point.x = event.offsetX;\n\t      this._point.y = event.offsetY;\n\t      var sign = event.detail < 0 || event.wheelDelta > 0 ? 1 : -1;\n\t      if (this.branchScaling && (event.metaKey || event.ctrlKey)) {\n\t        this.currentBranchScale *= Math.pow(this.branchScalingStep, sign);\n\t        this.setBranchScale(this.currentBranchScale, this._point);\n\t      } else {\n\t        this.smoothZoom(sign, this._point);\n\t      }\n\t    }\n\n\t    /**\n\t     * @param {RegExp} pattern\n\t     * @param {string} [searchProperty=id].\n\t     * @return {Branch[]}\n\t     */\n\n\t  }, {\n\t    key: 'findLeaves',\n\t    value: function findLeaves(pattern) {\n\t      var searchProperty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n\n\t      var foundLeaves = [];\n\n\t      var _iteratorNormalCompletion4 = true;\n\t      var _didIteratorError4 = false;\n\t      var _iteratorError4 = undefined;\n\n\t      try {\n\t        for (var _iterator4 = this.leaves[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n\t          var leaf = _step4.value;\n\n\t          if (leaf[searchProperty] && leaf[searchProperty].match(pattern)) {\n\t            foundLeaves.push(leaf);\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError4 = true;\n\t        _iteratorError4 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n\t            _iterator4.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError4) {\n\t            throw _iteratorError4;\n\t          }\n\t        }\n\t      }\n\n\t      return foundLeaves;\n\t    }\n\n\t    /**\n\t     * @param {Branch[]} leaves\n\t     * @param {string} property\n\t     * @param {} value\n\t     *\n\t     * @fires Tree#updated\n\t     */\n\n\t  }, {\n\t    key: 'updateLeaves',\n\t    value: function updateLeaves(leaves, property, value) {\n\t      var _iteratorNormalCompletion5 = true;\n\t      var _didIteratorError5 = false;\n\t      var _iteratorError5 = undefined;\n\n\t      try {\n\t        for (var _iterator5 = this.leaves[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n\t          var leaf = _step5.value;\n\n\t          leaf[property] = !value;\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError5 = true;\n\t        _iteratorError5 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n\t            _iterator5.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError5) {\n\t            throw _iteratorError5;\n\t          }\n\t        }\n\t      }\n\n\t      var _iteratorNormalCompletion6 = true;\n\t      var _didIteratorError6 = false;\n\t      var _iteratorError6 = undefined;\n\n\t      try {\n\t        for (var _iterator6 = leaves[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n\t          var _leaf = _step6.value;\n\n\t          _leaf[property] = value;\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError6 = true;\n\t        _iteratorError6 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n\t            _iterator6.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError6) {\n\t            throw _iteratorError6;\n\t          }\n\t        }\n\t      }\n\n\t      this.nodesUpdated(leaves.map(function (_) {\n\t        return _.id;\n\t      }), property);\n\t    }\n\n\t    /**\n\t     * Deselects all branches, implicitly calls {@link Tree#draw}.\n\t     */\n\n\t  }, {\n\t    key: 'clearSelect',\n\t    value: function clearSelect() {\n\t      this.root.cascadeFlag('selected', false);\n\t      this.draw();\n\t    }\n\n\t    /**\n\t     * @returns {string} Base64-encoded data uri of canvas\n\t     */\n\n\t  }, {\n\t    key: 'getPngUrl',\n\t    value: function getPngUrl() {\n\t      return this.canvas.canvas.toDataURL();\n\t    }\n\n\t    /**\n\t     * Loads a serialised representation of a tree, using the first registered\n\t     * parser that validates the input unless a format is specified.\n\t     *\n\t     * @param {string} inputString\n\t     * @param {Object} [options] - also passed on to the parser.\n\t     * @param {string} [options.format] - specify the parser to use.\n\t     * @param {function} [callback] - Called synchronously *after* the first draw.\n\t     *\n\t     * @fires Tree#error\n\t     *\n\t     * @see Tree#build\n\t     */\n\n\t  }, {\n\t    key: 'load',\n\t    value: function load(inputString) {\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t      var callback = arguments[2];\n\n\t      var buildOptions = options;\n\t      var buildCallback = callback;\n\n\t      // allows passing callback as second param\n\t      if (typeof options === 'function') {\n\t        buildCallback = options;\n\t        buildOptions = {};\n\t      }\n\n\t      if (buildCallback) {\n\t        buildOptions.callback = buildCallback;\n\t      }\n\n\t      if (buildOptions.format) {\n\t        this.build(inputString, _parsers2.default[buildOptions.format], buildOptions);\n\t        return;\n\t      }\n\n\t      var _iteratorNormalCompletion7 = true;\n\t      var _didIteratorError7 = false;\n\t      var _iteratorError7 = undefined;\n\n\t      try {\n\t        for (var _iterator7 = Object.keys(_parsers2.default)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n\t          var parserName = _step7.value;\n\n\t          var parser = _parsers2.default[parserName];\n\n\t          if (inputString.match(parser.fileExtension) || inputString.match(parser.validator)) {\n\t            this.build(inputString, parser, buildOptions);\n\t            return;\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError7 = true;\n\t        _iteratorError7 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion7 && _iterator7.return) {\n\t            _iterator7.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError7) {\n\t            throw _iteratorError7;\n\t          }\n\t        }\n\t      }\n\n\t      var error = new Error('String not recognised as a file or a parseable format string');\n\t      if (buildCallback) {\n\t        buildCallback(error);\n\t      }\n\t      this.loadError(error);\n\t    }\n\n\t    /**\n\t     * Builds the {@link Tree#originalTree} object.\n\t     */\n\n\t  }, {\n\t    key: 'saveOriginalTree',\n\t    value: function saveOriginalTree() {\n\t      this.originalTree.branches = this.branches;\n\t      this.originalTree.leaves = this.leaves;\n\t      this.originalTree.root = this.root;\n\t      this.originalTree.branchLengths = {};\n\t      this.originalTree.parents = {};\n\t    }\n\n\t    /**\n\t     * Clears the branches and leaves of the instance.\n\t     */\n\n\t  }, {\n\t    key: 'clearState',\n\t    value: function clearState() {\n\t      this.root = false;\n\t      this.leaves = [];\n\t      this.branches = {};\n\t      this.drawn = false;\n\t    }\n\n\t    /**\n\t     * Build {@link Tree#branches} and {@link Tree#leaves} properties.\n\t     */\n\n\t  }, {\n\t    key: 'extractNestedBranches',\n\t    value: function extractNestedBranches() {\n\t      this.branches = {};\n\t      this.leaves = [];\n\n\t      this.storeNode(this.root);\n\t      this.root.extractChildren();\n\t    }\n\n\t    /**\n\t     * High-level API to organising branches and leaves.\n\t     *\n\t     * @fires Tree#error\n\t     */\n\n\t  }, {\n\t    key: 'saveState',\n\t    value: function saveState() {\n\t      this.extractNestedBranches();\n\n\t      this.root.branchLength = 0;\n\t      this.maxBranchLength = 0;\n\t      this.root.setTotalLength();\n\n\t      if (this.maxBranchLength === 0) {\n\t        this.loadError(new Error('All branches in the tree are identical.'));\n\t        return;\n\t      }\n\t    }\n\n\t    /**\n\t     * Builds the object model of a tree.\n\t     *\n\t     * @param {string} formatString\n\t     * @param {Parser} parser\n\t     * @param {Object} options\n\t     *\n\t     * @fires Tree#error\n\t     * @fires Tree#beforeFirstDraw\n\t     * @fires Tree#loadCompleted\n\t     */\n\n\t  }, {\n\t    key: 'build',\n\t    value: function build(formatString, parser, options) {\n\t      var _this2 = this;\n\n\t      this.originalTree = {};\n\t      this.clearState();\n\t      _Branch2.default.lastId = 0;\n\n\t      var root = new _Branch2.default();\n\t      root.id = 'root';\n\t      this.branches.root = root;\n\t      this.setRoot(root);\n\n\t      parser.parse({ formatString: formatString, root: root, options: options }, function (error) {\n\t        if (error) {\n\t          if (options.callback) {\n\t            options.callback(error);\n\t          }\n\t          _this2.loadError(error);\n\t          return;\n\t        }\n\t        _this2.stringRepresentation = formatString;\n\t        _this2.saveState();\n\t        _this2.setInitialCollapsedBranches();\n\t        _this2.beforeFirstDraw();\n\t        _this2.draw();\n\t        _this2.saveOriginalTree();\n\t        if (options.callback) {\n\t          options.callback();\n\t        }\n\n\t        _this2.loadCompleted();\n\t      });\n\t    }\n\n\t    /**\n\t     * Draw a subtree.\n\t     *\n\t     * @param {Branch} node - the new root of the tree.\n\t     *\n\t     * @fires Tree#subtree\n\t     */\n\n\t  }, {\n\t    key: 'redrawFromBranch',\n\t    value: function redrawFromBranch(node) {\n\t      this.clearState();\n\t      this.resetTree();\n\n\t      this.originalTree.branchLengths[node.id] = node.branchLength;\n\t      this.originalTree.parents[node.id] = node.parent;\n\n\t      this.root = node;\n\t      this.root.parent = false;\n\n\t      this.saveState();\n\n\t      this.draw();\n\t      this.subtreeDrawn(node.id);\n\t    }\n\n\t    /**\n\t     * Reload the serialised version of the tree.\n\t     */\n\n\t  }, {\n\t    key: 'redrawOriginalTree',\n\t    value: function redrawOriginalTree() {\n\t      this.load(this.stringRepresentation);\n\t    }\n\n\t    /**\n\t     * Traverse the tree, generating ids and filing away objects.\n\t     *\n\t     * @param {Branch} node - starting point.\n\t     */\n\n\t  }, {\n\t    key: 'storeNode',\n\t    value: function storeNode(node) {\n\t      if (!node.id || node.id === '') {\n\t        node.id = _Branch2.default.generateId();\n\t      }\n\n\t      if (this.branches[node.id]) {\n\t        if (node !== this.branches[node.id]) {\n\t          if (!node.leaf) {\n\t            node.id = _Branch2.default.generateId();\n\t          } else {\n\t            throw new Error('Two nodes on this tree share the id ' + node.id);\n\t          }\n\t        }\n\t      }\n\n\t      this.branches[node.id] = node;\n\n\t      if (node.leaf) {\n\t        this.leaves.push(node);\n\t      }\n\t    }\n\n\t    /**\n\t     * @param {number} size\n\t     */\n\n\t  }, {\n\t    key: 'setNodeSize',\n\t    value: function setNodeSize(size) {\n\t      this.baseNodeSize = Number(size);\n\t      this.draw();\n\t    }\n\n\t    /**\n\t     * @param {Branch} node\n\t     */\n\n\t  }, {\n\t    key: 'setRoot',\n\t    value: function setRoot(node) {\n\t      node.tree = this;\n\t      this.root = node;\n\t    }\n\n\t    /**\n\t     * @param {number|string} size\n\t     */\n\n\t  }, {\n\t    key: 'setTextSize',\n\t    value: function setTextSize(size) {\n\t      this.textSize = Number(size);\n\t      this.draw();\n\t    }\n\n\t    /**\n\t     * Sets an appropriate font size for the proportions of the tree.\n\t     *\n\t     * @param {number} ystep - the space between leaves.\n\t     */\n\n\t  }, {\n\t    key: 'setFontSize',\n\t    value: function setFontSize(ystep) {\n\t      this.textSize = this.calculateFontSize ? this.calculateFontSize(ystep) : Math.min(ystep / 2, 15);\n\t      this.canvas.font = this.textSize + 'pt ' + this.font;\n\t    }\n\n\t    /**\n\t     * @param {string} type - The name of a registered tree type.\n\t     * @param {boolean} [quiet] - Do not broadcast.\n\t     *\n\t     * @fires Tree#typechanged\n\t     */\n\n\t  }, {\n\t    key: 'setTreeType',\n\t    value: function setTreeType(type, quiet) {\n\t      if (!(type in _treeTypes2.default)) {\n\t        return fireEvent(this.containerElement, 'error', { error: new Error('\"' + type + '\" is not a known tree-type.') });\n\t      }\n\n\t      var oldType = this.treeType;\n\t      this.treeType = type;\n\t      this.type = _treeTypes2.default[type];\n\n\t      this.branchRenderer = _treeTypes2.default[type].branchRenderer;\n\t      this.prerenderer = _treeTypes2.default[type].prerenderer;\n\t      this.labelAlign = _treeTypes2.default[type].labelAlign;\n\t      this.calculateFontSize = _treeTypes2.default[type].calculateFontSize;\n\n\t      if (this.drawn) {\n\t        this.drawn = false;\n\t        this.draw();\n\t      }\n\n\t      if (!quiet) {\n\t        this.treeTypeChanged(oldType, type);\n\t      }\n\t    }\n\n\t    /**\n\t     * Resizes the canvas element.\n\t     *\n\t     * @param {number} width\n\t     * @param {number} height\n\t     */\n\n\t  }, {\n\t    key: 'setSize',\n\t    value: function setSize(width, height) {\n\t      this.canvas.canvas.width = width;\n\t      this.canvas.canvas.height = height;\n\t      if (this.navigator) {\n\t        this.navigator.resize();\n\t      }\n\t      this.adjustForPixelRatio();\n\t    }\n\n\t    /**\n\t     * Scale the size of the canvas element to the pixel ratio\n\t     */\n\n\t  }, {\n\t    key: 'adjustForPixelRatio',\n\t    value: function adjustForPixelRatio() {\n\t      var ratio = getPixelRatio(this.canvas);\n\n\t      this.canvas.canvas.style.height = this.canvas.canvas.height + 'px';\n\t      this.canvas.canvas.style.width = this.canvas.canvas.width + 'px';\n\n\t      if (ratio > 1) {\n\t        this.canvas.canvas.width *= ratio;\n\t        this.canvas.canvas.height *= ratio;\n\t      }\n\t    }\n\n\t    /**\n\t     * @returns {{ x: number, y: number }} point w/ x and y coordinates\n\t     */\n\n\t  }, {\n\t    key: 'getCentrePoint',\n\t    value: function getCentrePoint() {\n\t      var pixelRatio = getPixelRatio(this.canvas);\n\t      return {\n\t        x: this.canvas.canvas.width / 2 / pixelRatio,\n\t        y: this.canvas.canvas.height / 2 / pixelRatio\n\t      };\n\t    }\n\n\t    /**\n\t     * Zoom to a specific level over a specific point.\n\t     *\n\t     * @param {number} zoom\n\t     * @param {{ x: number, y: number }} [point=Tree#getCentrePoint]\n\t     */\n\n\t  }, {\n\t    key: 'setZoom',\n\t    value: function setZoom(zoom) {\n\t      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getCentrePoint(),\n\t          x = _ref.x,\n\t          y = _ref.y;\n\n\t      if (zoom > 0) {\n\t        var oldZoom = this.zoom;\n\t        this.zoom = zoom;\n\t        this.offsetx = this.calculateZoomedOffset(this.offsetx, x, oldZoom, zoom);\n\t        this.offsety = this.calculateZoomedOffset(this.offsety, y, oldZoom, zoom);\n\t        this.draw();\n\t      }\n\t    }\n\n\t    /**\n\t     * Zoom in or out from the current zoom level towards a point.\n\t     *\n\t     * @param {number} steps - positive to zoom in, negative to zoom out.\n\t     * @param {{ x: number, y: number }} point\n\t     */\n\n\t  }, {\n\t    key: 'smoothZoom',\n\t    value: function smoothZoom(steps, point) {\n\t      this.setZoom(Math.pow(10, Math.log(this.zoom) / Math.log(10) + steps * this.zoomFactor * 0.01), point);\n\t    }\n\n\t    /**\n\t     * Magic to enable zooming to a point.\n\t     *\n\t     * @author Khalil Abudahab\n\t     * @param {number} offset\n\t     * @param {number} coord\n\t     * @param {number} oldZoom\n\t     * @param {number} newZoom\n\t     */\n\n\t  }, {\n\t    key: 'calculateZoomedOffset',\n\t    value: function calculateZoomedOffset(offset, coord, oldZoom, newZoom) {\n\t      return -1 * ((-1 * offset + coord) / oldZoom * newZoom - coord);\n\t    }\n\n\t    /**\n\t     * Scale branches horizontally\n\t     *\n\t     * @param {number} scale\n\t     * @param {Object} point\n\t     */\n\n\t  }, {\n\t    key: 'setBranchScale',\n\t    value: function setBranchScale() {\n\t      var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\t      var point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { x: this.canvas.canvas.width / 2, y: this.canvas.canvas.height / 2 };\n\n\t      var treeType = _treeTypes2.default[this.treeType];\n\t      if (!treeType.branchScalingAxis || scale < 0) {\n\t        return;\n\t      }\n\n\t      var previoudBranchLength = this.branchScalar;\n\t      this.branchScalar = this.initialBranchScalar * scale;\n\t      var scaleRatio = this.branchScalar / previoudBranchLength;\n\t      var offset = this['offset' + treeType.branchScalingAxis];\n\t      var oldPosition = point[treeType.branchScalingAxis];\n\t      var newPosition = (point[treeType.branchScalingAxis] - offset) * scaleRatio + offset;\n\t      this['offset' + treeType.branchScalingAxis] += oldPosition - newPosition;\n\t      this.draw();\n\t    }\n\n\t    /**\n\t     * @method\n\t     */\n\n\t  }, {\n\t    key: 'toggleLabels',\n\t    value: function toggleLabels() {\n\t      this.showLabels = !this.showLabels;\n\t      this.draw();\n\t    }\n\n\t    /**\n\t     * @method\n\t     */\n\n\t  }, {\n\t    key: 'setMaxLabelLength',\n\t    value: function setMaxLabelLength() {\n\t      var dimensions;\n\t      if (this.maxLabelLength[this.treeType] === undefined) {\n\t        this.maxLabelLength[this.treeType] = 0;\n\t      }\n\n\t      for (var i = 0; i < this.leaves.length; i++) {\n\t        dimensions = this.canvas.measureText(this.leaves[i].id);\n\t        // finding the maximum label length\n\t        if (dimensions.width > this.maxLabelLength[this.treeType]) {\n\t          this.maxLabelLength[this.treeType] = dimensions.width;\n\t        }\n\t      }\n\t    }\n\n\t    /**\n\t     * @event Tree#loading\n\t     */\n\n\t  }, {\n\t    key: 'loadStarted',\n\t    value: function loadStarted() {\n\t      fireEvent(this.containerElement, 'loading');\n\t    }\n\n\t    /**\n\t     * @event Tree#beforeFirstDraw\n\t     */\n\n\t  }, {\n\t    key: 'beforeFirstDraw',\n\t    value: function beforeFirstDraw() {\n\t      fireEvent(this.containerElement, 'beforeFirstDraw');\n\t    }\n\n\t    /**\n\t     * @event Tree#loaded\n\t     */\n\n\t  }, {\n\t    key: 'loadCompleted',\n\t    value: function loadCompleted() {\n\t      fireEvent(this.containerElement, 'loaded');\n\t    }\n\n\t    /**\n\t     * @event Tree#error\n\t     * @property {Error} error\n\t     */\n\n\t  }, {\n\t    key: 'loadError',\n\t    value: function loadError(error) {\n\t      fireEvent(this.containerElement, 'error', { error: error });\n\t    }\n\n\t    /**\n\t     * @event Tree#subtree\n\t     * @property {Branch} node\n\t     */\n\n\t  }, {\n\t    key: 'subtreeDrawn',\n\t    value: function subtreeDrawn(node) {\n\t      fireEvent(this.containerElement, 'subtree', { node: node });\n\t    }\n\n\t    /**\n\t     * @event Tree#updated\n\t     * @property {string[]} nodeIds\n\t     * @property {string} property\n\t     * @property {boolean} append\n\t     */\n\n\t  }, {\n\t    key: 'nodesUpdated',\n\t    value: function nodesUpdated(nodeIds, property) {\n\t      var append = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n\t      fireEvent(this.containerElement, 'updated', { nodeIds: nodeIds, property: property, append: append });\n\t    }\n\n\t    /**\n\t     * @event Tree#typechanged\n\t     * @property {string} oldType\n\t     * @property {string} newType\n\t     */\n\n\t  }, {\n\t    key: 'treeTypeChanged',\n\t    value: function treeTypeChanged(oldType, newType) {\n\t      fireEvent(this.containerElement, 'typechanged', { oldType: oldType, newType: newType });\n\t    }\n\n\t    /**\n\t     * @param {string}\n\t     * @param {function}\n\t     */\n\n\t  }, {\n\t    key: 'addListener',\n\t    value: function addListener(event, listener, target) {\n\t      if (!this.eventListeners[event]) this.eventListeners[event] = [];\n\t      this.eventListeners[event].push({ listener: listener, target: target });\n\t      addEvent(target || this.containerElement, event, listener);\n\t    }\n\n\t    /**\n\t     * @param {string}\n\t     * @param {function}\n\t     */\n\n\t  }, {\n\t    key: 'removeListener',\n\t    value: function removeListener(event, listener, target) {\n\t      removeEvent(target || this.containerElement, event, listener);\n\t    }\n\n\t    /**\n\t     * @param {Array.<Branch>} [leaves=this.leaves]\n\t     *\n\t     * @returns {Array.<Array.<number>>} bounds - Minimum x and y coordinates in\n\t     * the first array, maximum x and y coordinates in the second.\n\t     *\n\t     * @example const [ [ minx, miny ], [ maxx, maxy ] ] = tree.getBounds()\n\t     */\n\n\t  }, {\n\t    key: 'getBounds',\n\t    value: function getBounds() {\n\t      var leaves = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.leaves;\n\n\t      // this.leaves assumes bounds of whole tree, start from root\n\t      var initialBounds = leaves === this.leaves ? this.root : leaves[0];\n\t      var minx = initialBounds.startx;\n\t      var maxx = initialBounds.startx;\n\t      var miny = initialBounds.starty;\n\t      var maxy = initialBounds.starty;\n\n\t      var _iteratorNormalCompletion8 = true;\n\t      var _didIteratorError8 = false;\n\t      var _iteratorError8 = undefined;\n\n\t      try {\n\t        for (var _iterator8 = leaves[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n\t          var leaf = _step8.value;\n\n\t          var bounds = leaf.getBounds();\n\t          minx = Math.min(minx, bounds.minx);\n\t          maxx = Math.max(maxx, bounds.maxx);\n\t          miny = Math.min(miny, bounds.miny);\n\t          maxy = Math.max(maxy, bounds.maxy);\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError8 = true;\n\t        _iteratorError8 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion8 && _iterator8.return) {\n\t            _iterator8.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError8) {\n\t            throw _iteratorError8;\n\t          }\n\t        }\n\t      }\n\n\t      return [[minx, miny], [maxx, maxy]];\n\t    }\n\n\t    /**\n\t     * Zoom to the provided leaves.\n\t     *\n\t     * @param {Array.<Branch>}\n\t     */\n\n\t  }, {\n\t    key: 'fitInPanel',\n\t    value: function fitInPanel(leaves) {\n\t      this.zoom = 1; // calculates consistent bounds\n\t      var bounds = this.getBounds(leaves);\n\t      var canvasSize = [this.canvas.canvas.width - this.padding * 2, this.canvas.canvas.height - this.padding * 2];\n\t      var treeSize = [bounds[1][0] - bounds[0][0], bounds[1][1] - bounds[0][1]];\n\t      var pixelRatio = getPixelRatio(this.canvas);\n\t      var xZoomRatio = canvasSize[0] / treeSize[0];\n\t      var yZoomRatio = canvasSize[1] / treeSize[1];\n\t      this.zoom = Math.min(xZoomRatio, yZoomRatio);\n\t      this.offsetx = -1 * bounds[0][0] * this.zoom;\n\t      this.offsety = -1 * bounds[0][1] * this.zoom;\n\t      if (xZoomRatio > yZoomRatio) {\n\t        this.offsetx += this.padding + (canvasSize[0] - treeSize[0] * this.zoom) / 2;\n\t        this.offsety += this.padding;\n\t      } else {\n\t        this.offsetx += this.padding;\n\t        this.offsety += this.padding + (canvasSize[1] - treeSize[1] * this.zoom) / 2;\n\t      }\n\t      this.offsetx = this.offsetx / pixelRatio;\n\t      this.offsety = this.offsety / pixelRatio;\n\t    }\n\n\t    /**\n\t     * Reapply data in {@link Tree#originalTree}.\n\t     */\n\n\t  }, {\n\t    key: 'resetTree',\n\t    value: function resetTree() {\n\t      if (!this.originalTree.branches) return;\n\n\t      this.branches = this.originalTree.branches;\n\t      var _iteratorNormalCompletion9 = true;\n\t      var _didIteratorError9 = false;\n\t      var _iteratorError9 = undefined;\n\n\t      try {\n\t        for (var _iterator9 = Object.keys(this.originalTree.branchLengths)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n\t          var n = _step9.value;\n\n\t          this.branches[n].branchLength = this.originalTree.branchLengths[n];\n\t          this.branches[n].parent = this.originalTree.parents[n];\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError9 = true;\n\t        _iteratorError9 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion9 && _iterator9.return) {\n\t            _iterator9.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError9) {\n\t            throw _iteratorError9;\n\t          }\n\t        }\n\t      }\n\n\t      this.leaves = this.originalTree.leaves;\n\t      this.root = this.originalTree.root;\n\t    }\n\n\t    /**\n\t     * @param {Branch}\n\t     */\n\n\t  }, {\n\t    key: 'rotateBranch',\n\t    value: function rotateBranch(branch) {\n\t      this.branches[branch.id].rotate();\n\t    }\n\n\t    /**\n\t     * @returns {string} Newick representation of current object model.\n\t     */\n\n\t  }, {\n\t    key: 'exportNwk',\n\t    value: function exportNwk() {\n\t      var nwk = this.root.getNwk();\n\t      return nwk.substr(0, nwk.lastIndexOf(')') + 1) + ';';\n\t    }\n\n\t    /**\n\t     * Resize canvas element to container.\n\t     */\n\n\t  }, {\n\t    key: 'resizeToContainer',\n\t    value: function resizeToContainer() {\n\t      this.setSize(this.containerElement.offsetWidth, this.containerElement.offsetHeight);\n\t    }\n\n\t    /**\n\t     * Removes tracked event listeners and provides a hook for plugins to clean up\n\t     * after themselves.\n\t     */\n\n\t  }, {\n\t    key: 'cleanup',\n\t    value: function cleanup() {\n\t      this.removeEventListeners();\n\t    }\n\t  }, {\n\t    key: 'alignLabels',\n\t    get: function get() {\n\t      return this.showLabels && this.labelAlign && this.labelAlignEnabled;\n\t    },\n\t    set: function set(value) {\n\t      this.labelAlignEnabled = value;\n\t    }\n\t  }]);\n\n\t  return Tree;\n\t}();\n\n\t/**\n\t * @memberof Tree\n\t * @method\n\t * @see Tree#addListener\n\t */\n\n\n\tTree.prototype.on = Tree.prototype.addListener;\n\n\t/**\n\t * @memberof Tree\n\t * @method\n\t * @see Tree#removeListener\n\t */\n\tTree.prototype.off = Tree.prototype.removeListener;\n\n\texports.default = Tree;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.events = exports.dom = exports.constants = exports.canvas = undefined;\n\n\tvar _canvas2 = __webpack_require__(3);\n\n\tvar _canvas = _interopRequireWildcard(_canvas2);\n\n\tvar _constants2 = __webpack_require__(6);\n\n\tvar _constants = _interopRequireWildcard(_constants2);\n\n\tvar _dom2 = __webpack_require__(4);\n\n\tvar _dom = _interopRequireWildcard(_dom2);\n\n\tvar _events2 = __webpack_require__(5);\n\n\tvar _events = _interopRequireWildcard(_events2);\n\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n\texports.canvas = _canvas;\n\texports.constants = _constants;\n\texports.dom = _dom;\n\texports.events = _events;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.getBackingStorePixelRatio = getBackingStorePixelRatio;\n\texports.getPixelRatio = getPixelRatio;\n\texports.translateClick = translateClick;\n\texports.translatePoint = translatePoint;\n\texports.undoPointTranslation = undoPointTranslation;\n\n\tvar _dom = __webpack_require__(4);\n\n\t/**\n\t * Return backing store pixel ratio of context.\n\t *\n\t * @param context - The rendering context of HTMl5 canvas.\n\t *\n\t */\n\tfunction getBackingStorePixelRatio(context) {\n\t  return context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || 1;\n\t}\n\n\tfunction getPixelRatio(canvas) {\n\t  return (window.devicePixelRatio || 1) / getBackingStorePixelRatio(canvas);\n\t}\n\n\tfunction translateClick(event, tree) {\n\t  var pixelRatio = getPixelRatio(tree.canvas);\n\t  return [(event.offsetX - tree.offsetx) / tree.zoom * pixelRatio, (event.offsetY - tree.offsety) / tree.zoom * pixelRatio];\n\t}\n\n\tfunction translatePoint() {\n\t  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { x: 0, y: 0 },\n\t      x = _ref.x,\n\t      y = _ref.y;\n\n\t  var phylocanvas = arguments[1];\n\n\t  var pixelRatio = getPixelRatio(phylocanvas.canvas);\n\t  return {\n\t    x: (x - phylocanvas.offsetx) / phylocanvas.zoom * pixelRatio,\n\t    y: (y - phylocanvas.offsety) / phylocanvas.zoom * pixelRatio\n\t  };\n\t}\n\n\tfunction undoPointTranslation() {\n\t  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { x: 0, y: 0 },\n\t      x = _ref2.x,\n\t      y = _ref2.y;\n\n\t  var phylocanvas = arguments[1];\n\n\t  var pixelRatio = getPixelRatio(phylocanvas.canvas);\n\t  return {\n\t    x: x / pixelRatio * phylocanvas.zoom + phylocanvas.offsetx,\n\t    y: y / pixelRatio * phylocanvas.zoom + phylocanvas.offsety\n\t  };\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.createBlobUrl = createBlobUrl;\n\texports.setupDownloadLink = setupDownloadLink;\n\texports.getX = getX;\n\texports.getY = getY;\n\texports.addClass = addClass;\n\texports.removeClass = removeClass;\n\texports.hasClass = hasClass;\n\texports.setCursorDragging = setCursorDragging;\n\texports.setCursorDrag = setCursorDrag;\n\n\tvar _events = __webpack_require__(5);\n\n\tvar windowURL = window.URL || window.webkitURL;\n\n\tfunction createBlobUrl(data) {\n\t  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text/plain;charset=utf-8';\n\n\t  var blob = new Blob([data], { type: type });\n\t  return windowURL.createObjectURL(blob);\n\t}\n\n\tfunction setupDownloadLink(url, filename) {\n\t  var anchor = document.createElement('a');\n\t  var isDownloadSupported = typeof anchor.download !== 'undefined';\n\n\t  anchor.href = url;\n\t  anchor.target = '_blank';\n\t  if (isDownloadSupported) {\n\t    anchor.download = filename;\n\t  }\n\t  (0, _events.fireEvent)(anchor, 'click');\n\t  if (isDownloadSupported) {\n\t    windowURL.revokeObjectURL(anchor.href);\n\t  }\n\t}\n\n\t/**\n\t * Get the x coordinate of oElement\n\t *\n\t * @param domElement - The element to get the X position of.\n\t *\n\t */\n\tfunction getX(domElement) {\n\t  var xValue = 0;\n\t  while (domElement) {\n\t    xValue += domElement.offsetLeft;\n\t    domElement = domElement.offsetParent;\n\t  }\n\t  return xValue;\n\t}\n\n\t/**\n\t * Get the y coordinate of oElement\n\t *\n\t * @param domElement - The element to get the Y position of.\n\t *\n\t */\n\tfunction getY(domElement) {\n\t  var yValue = 0;\n\t  while (domElement) {\n\t    yValue += domElement.offsetTop;\n\t    domElement = domElement.offsetParent;\n\t  }\n\t  return yValue;\n\t}\n\n\tfunction addClass(element, className) {\n\t  var classes = element.className.split(' ');\n\t  if (classes.indexOf(className) === -1) {\n\t    classes.push(className);\n\t    element.className = classes.join(' ');\n\t  }\n\t}\n\n\tfunction removeClass(element, className) {\n\t  var classes = element.className.split(' ');\n\t  var index = classes.indexOf(className);\n\n\t  if (index !== -1) {\n\t    classes.splice(index, 1);\n\t    element.className = classes.join(' ');\n\t  }\n\t}\n\n\tfunction hasClass(element, className) {\n\t  var classes = element.className.split(' ');\n\t  var index = classes.indexOf(className);\n\n\t  return index !== -1;\n\t}\n\n\t/**\n\t * Setting the cursor to dragging required vendor prefixes.\n\t * @param domElement\n\t */\n\tfunction setCursorDragging(domElement) {\n\t  domElement.style.cursor = \"-webkit-grabbing\";\n\t  domElement.style.cursor = \"-moz-grabbing\";\n\t  domElement.style.cursor = \"grabbing\";\n\t}\n\n\t/**\n\t * Setting the cursor to drag required vendor prefixes.\n\t * @param domElement\n\t */\n\tfunction setCursorDrag(domElement) {\n\t  domElement.style.cursor = \"-webkit-grab\";\n\t  domElement.style.cursor = \"-moz-grab\";\n\t  domElement.style.cursor = \"grab\";\n\t}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\texports.preventDefault = preventDefault;\n\texports.fireEvent = fireEvent;\n\texports.addEvent = addEvent;\n\texports.removeEvent = removeEvent;\n\texports.killEvent = killEvent;\n\texports.createHandler = createHandler;\n\tfunction preventDefault(event) {\n\t  event.preventDefault();\n\t  return false;\n\t}\n\n\tfunction fireEvent(element, type) {\n\t  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\t  var event; // The custom event that will be created\n\t  var param;\n\n\t  if (document.createEvent) {\n\t    event = document.createEvent('HTMLEvents');\n\t    event.initEvent(type, true, true);\n\t  } else {\n\t    event = document.createEventObject();\n\t    event.eventType = type;\n\t  }\n\n\t  event.eventName = type;\n\n\t  for (param in params) {\n\t    if (params.hasOwnProperty(param)) {\n\t      event[param] = params[param];\n\t    }\n\t  }\n\n\t  if (document.createEvent) {\n\t    element.dispatchEvent(event);\n\t  } else {\n\t    element.fireEvent('on' + event.eventType, event);\n\t  }\n\t}\n\n\tfunction addEvent(elem, event, fn) {\n\t  if (elem.addEventListener) {\n\t    elem.addEventListener(event, fn, false);\n\t  } else {\n\t    elem.attachEvent('on' + event, function () {\n\t      // set the this pointer same as addEventListener when fn is called\n\t      return fn.call(elem, window.event);\n\t    });\n\t  }\n\t}\n\n\tfunction removeEvent(elem, event, fn) {\n\t  if (elem.removeEventListener) {\n\t    elem.removeEventListener(event, fn, false);\n\t  } else {\n\t    console.warn('[Phylocanvas] Unable to remove event, removeEventListener not supported');\n\t  }\n\t}\n\n\tfunction killEvent(e) {\n\t  e.stopPropagation();\n\t  e.preventDefault();\n\t}\n\n\t/**\n\t * Creates a function which can be called from an event handler independent of\n\t * scope.\n\t *\n\t * @param {Object} obj the object the function will be called on\n\t * @param {String} func the name of the function to be called\n\t * @retuns {function}\n\t */\n\tfunction createHandler(obj, func) {\n\t  var handler;\n\n\t  if ((typeof func === 'undefined' ? 'undefined' : _typeof(func)) === _typeof('aaa')) {\n\t    handler = function handler(e) {\n\t      if (obj[func]) {\n\t        return obj[func](e);\n\t      }\n\t    };\n\t  } else {\n\t    handler = function handler() {\n\t      return func(obj);\n\t    };\n\t  }\n\t  return handler;\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * An enumeration of certain pre-defined angles to enable faster drawing of\n\t * trees. There are FORTYFIVE, QUARTER, HALF and FULL. Values are all radians.\n\t *\n\t * @enum\n\t * @memberof PhyloCanvas\n\t * @constant\n\t */\n\tvar Angles = exports.Angles = {\n\t  /**\n\t   * @constant\n\t   * @type double\n\t   * @description PI / 4\n\t   */\n\t  FORTYFIVE: Math.PI / 4,\n\t  /**\n\t   * @constant\n\t   * @type double\n\t   * @description PI / 2\n\t   */\n\t  QUARTER: Math.PI / 2,\n\t  /**\n\t   * @constant\n\t   * @type double\n\t   * @description PI\n\t   */\n\t  HALF: Math.PI,\n\t  /**\n\t   * @constant\n\t   * @type double\n\t   * @description PI * 2\n\t   */\n\t  FULL: 2 * Math.PI\n\t};\n\n\t/**\n\t * dictionary to translate newick annotations to branch renderer ids\n\t *\n\t * @enum\n\t * @memberof PhyloCanvas\n\t * @constant\n\t */\n\tvar Shapes = exports.Shapes = {\n\t  x: 'star',\n\t  s: 'square',\n\t  o: 'circle',\n\t  t: 'triangle'\n\t};\n\n\t/**\n\t * Standard set of predicates.\n\t *\n\t * @enum\n\t * @constant\n\t */\n\tvar Predicates = exports.Predicates = {\n\t  tautology: function tautology() {\n\t    return true;\n\t  },\n\t  contradiction: function contradiction() {\n\t    return false;\n\t  },\n\t  leafOnly: function leafOnly(node) {\n\t    return node.leaf;\n\t  },\n\t  nonLeaf: function nonLeaf(node) {\n\t    return !node.leaf;\n\t  }\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _utils = __webpack_require__(2);\n\n\tvar _treeTypes = __webpack_require__(8);\n\n\tvar _treeTypes2 = _interopRequireDefault(_treeTypes);\n\n\tvar _nodeRenderers = __webpack_require__(26);\n\n\tvar _nodeRenderers2 = _interopRequireDefault(_nodeRenderers);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tvar Angles = _utils.constants.Angles,\n\t    Shapes = _utils.constants.Shapes;\n\n\t// Caching object to reduce garbage\n\n\tvar _bounds = {\n\t  minx: 0,\n\t  maxx: 0,\n\t  miny: 0,\n\t  maxy: 0\n\t};\n\n\tvar _leafStyle = {\n\t  lineWidth: null,\n\t  strokeStyle: null,\n\t  fillStyle: null\n\t};\n\n\t/**\n\t * A branch of the tree.\n\t *\n\t * @class\n\t */\n\n\tvar Branch = function () {\n\t  function Branch() {\n\t    _classCallCheck(this, Branch);\n\n\t    /**\n\t     * The branch's angle clockwise from horizontal in radians (used paricularly\n\t     * for circular and radial trees).\n\t     *\n\t     * @type number\n\t     */\n\t    this.angle = 0;\n\n\t    /**\n\t     * The length of the branch.\n\t     *\n\t     * @type number\n\t     */\n\t    this.branchLength = 0;\n\n\t    /**\n\t     * The center of the end of the node on the x axis.\n\t     *\n\t     * @type number\n\t     */\n\t    this.centerx = 0;\n\n\t    /**\n\t     * The center of the end of the node on the y axis.\n\t     *\n\t     * @type number\n\t     */\n\t    this.centery = 0;\n\n\t    /**\n\t     * The branches that stem from this branch.\n\t     *\n\t     * @type Branch[]\n\t     */\n\t    this.children = [];\n\n\t    /**\n\t     * True if the node has been collapsed.\n\t     *\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.collapsed = false;\n\n\t    /**\n\t     * Custom colour for branch, initialised as null to use tree-level default.\n\t     *\n\t     * @type string\n\t     */\n\t    this.colour = null;\n\n\t    /**\n\t     * Holds custom data for this node.\n\t     *\n\t     * @type object\n\t     */\n\t    this.data = {};\n\n\t    /**\n\t     * This node's highlight status.\n\t     *\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.highlighted = false;\n\n\t    /**\n\t     * Whether the user is hovering over the node.\n\t     *\n\t     * @type boolean\n\t     */\n\t    this.hovered = false;\n\n\t    /**\n\t     * This node's unique ID.\n\t     *\n\t     * @type string\n\t     */\n\t    this.id = '';\n\n\t    /**\n\t     * The text label for this node.\n\t     *\n\t     * @type string\n\t     */\n\t    this.label = null;\n\n\t    /**\n\t     * If true, this node has no children.\n\t     *\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.leaf = true;\n\n\t    /**\n\t     * The angle that the last child of this brach 'splays' at, used for\n\t     * circular trees.\n\t     *\n\t     * @type number\n\t     * @default\n\t     */\n\t    this.maxChildAngle = 0;\n\n\t    /**\n\t     * The angle that the last child of this brach 'splays' at, used for\n\t     * circular trees.\n\t     *\n\t     * @type number\n\t     * @default\n\t     */\n\t    this.minChildAngle = Angles.FULL;\n\n\t    /**\n\t     * What kind of teminal should be drawn on this node.\n\t     *\n\t     * @type string\n\t     * @default\n\t     */\n\t    this.nodeShape = 'circle';\n\n\t    /**\n\t     * The parent branch of this branch.\n\t     *\n\t     * @type Branch\n\t     */\n\t    this.parent = null;\n\n\t    /**\n\t     * The relative size of the terminal of this node.\n\t     *\n\t     * @type number\n\t     * @default\n\t     */\n\t    this.radius = 1.0;\n\n\t    /**\n\t     * True if this branch is currently selected.\n\t     *\n\t     * @type boolean\n\t     */\n\t    this.selected = false;\n\n\t    /**\n\t     * The x position of the start of the branch.\n\t     *\n\t     * @type number\n\t     */\n\t    this.startx = 0;\n\n\t    /**\n\t     * The y position of the start of the branch.\n\t     *\n\t     * @type number\n\t     */\n\t    this.starty = 0;\n\n\t    /**\n\t     * The length from the root of the tree to the tip of this branch.\n\t     *\n\t     * @type number\n\t     */\n\t    this.totalBranchLength = 0;\n\n\t    /**\n\t     * The tree object that this branch is part of.\n\t     *\n\t     * @type Tree\n\t     */\n\t    this.tree = null;\n\n\t    /**\n\t     * If true, this branch is not rendered.\n\t     *\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.pruned = false;\n\n\t    /**\n\t     * Allows label to be individually styled.\n\t     *\n\t     * @type object\n\t     * @property {string} colour\n\t     * @property {number} textSize\n\t     * @property {string} font\n\t     * @property {string} format - e.g. bold, italic\n\t     */\n\t    this.labelStyle = {};\n\n\t    /**\n\t     * Allows label to be individually styled.\n\t     *\n\t     * @type object\n\t     * @property {string} colour\n\t     * @property {number} textSize\n\t     * @property {string} font\n\t     * @property {string} format - e.g. bold, italic\n\t     */\n\t    this.internalLabelStyle = null;\n\n\t    /**\n\t     * If false, branch does not respond to mouse events.\n\t     *\n\t     * @type boolean\n\t     * @default\n\t     */\n\t    this.interactive = true;\n\n\t    /**\n\t     * Defines leaf style for this branch.\n\t     *\n\t     * @type object\n\t     * @property {number} lineWidth\n\t     * @property {string} strokeStyle\n\t     * @property {string} fillStyle\n\t     *\n\t     * @example\n\t     * branch.leafStyle = {\n\t     *   lineWidth: 2,\n\t     *   strokeStyle: '#ff0000',\n\t     *   fillStyle: 'blue'\n\t     * };\n\t     */\n\t    this.leafStyle = {};\n\n\t    /**\n\t     * Minimum x coordintate.\n\t     *\n\t     * @type number\n\t     */\n\t    this.minx = 0;\n\n\t    /**\n\t     * Minimum y coordintate.\n\t     *\n\t     * @type number\n\t     */\n\t    this.miny = 0;\n\n\t    /**\n\t     * Maximum x coordintate.\n\t     *\n\t     * @type number\n\t     */\n\t    this.maxx = 0;\n\n\t    /**\n\t     * Maximum y coordintate.\n\t     *\n\t     * @type number\n\t     */\n\t    this.maxy = 0;\n\t  }\n\n\t  /**\n\t   * For branches without a label.\n\t   *\n\t   * @returns {string} new ID\n\t   */\n\n\n\t  _createClass(Branch, [{\n\t    key: 'clicked',\n\n\n\t    /**\n\t     * Determines if this branch has been clicked.\n\t     *\n\t     * @param {number}\n\t     * @param {number}\n\t     * @returns {Branch}\n\t     */\n\t    value: function clicked(x, y) {\n\t      if (this.dragging || this.hasCollapsedAncestor()) {\n\t        return null;\n\t      }\n\t      if (x < this.maxx && x > this.minx && y < this.maxy && y > this.miny) {\n\t        return this;\n\t      }\n\n\t      for (var i = this.children.length - 1; i >= 0; i--) {\n\t        var child = this.children[i].clicked(x, y);\n\t        if (child) {\n\t          return child;\n\t        }\n\t      }\n\t    }\n\n\t    /**\n\t     * @method\n\t     */\n\n\t  }, {\n\t    key: 'drawLabel',\n\t    value: function drawLabel() {\n\t      var fSize = this.getTextSize();\n\t      var label = this.getLabel();\n\n\t      this.canvas.font = this.getFontString();\n\t      this.labelWidth = this.canvas.measureText(label).width;\n\n\t      // finding the maximum label length\n\t      if (this.tree.maxLabelLength[this.tree.treeType] === undefined) {\n\t        this.tree.maxLabelLength[this.tree.treeType] = 0;\n\t      }\n\t      if (this.labelWidth > this.tree.maxLabelLength[this.tree.treeType]) {\n\t        this.tree.maxLabelLength[this.tree.treeType] = this.labelWidth;\n\t      }\n\n\t      var tx = this.getLabelStartX();\n\n\t      if (this.tree.alignLabels) {\n\t        tx += Math.abs(this.tree.labelAlign.getLabelOffset(this));\n\t      }\n\n\t      if (this.angle > Angles.QUARTER && this.angle < Angles.HALF + Angles.QUARTER) {\n\t        this.canvas.rotate(Angles.HALF);\n\t        // Angles.Half text position changes\n\t        tx = -tx - this.labelWidth * 1;\n\t      }\n\n\t      this.canvas.beginPath();\n\t      this.canvas.fillStyle = this.getTextColour();\n\t      this.canvas.fillText(label, tx, fSize / 2);\n\t      this.canvas.closePath();\n\n\t      // Rotate canvas back to original position\n\t      if (this.angle > Angles.QUARTER && this.angle < Angles.HALF + Angles.QUARTER) {\n\t        this.canvas.rotate(Angles.HALF);\n\t      }\n\t    }\n\n\t    /**\n\t     * Sets the minimum and maximum coordinates of the branch.\n\t     *\n\t     * @param {number}\n\t     * @param {number}\n\t     * @param {number}\n\t     */\n\n\t  }, {\n\t    key: 'setNodeDimensions',\n\t    value: function setNodeDimensions(centerX, centerY, radius) {\n\t      var boundedRadius = radius;\n\n\t      if (radius * this.tree.zoom < 5 || !this.leaf) {\n\t        boundedRadius = 5 / this.tree.zoom;\n\t      }\n\n\t      this.minx = centerX - boundedRadius;\n\t      this.maxx = centerX + boundedRadius;\n\t      this.miny = centerY - boundedRadius;\n\t      this.maxy = centerY + boundedRadius;\n\t    }\n\t  }, {\n\t    key: 'getNumberOfLeaves',\n\t    value: function getNumberOfLeaves() {\n\t      var numberOfLeaves = 0;\n\t      var queue = [this];\n\t      while (queue.length) {\n\t        var node = queue.pop();\n\t        if (node.leaf) {\n\t          numberOfLeaves++;\n\t        } else {\n\t          var _iteratorNormalCompletion = true;\n\t          var _didIteratorError = false;\n\t          var _iteratorError = undefined;\n\n\t          try {\n\t            for (var _iterator = node.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t              var child = _step.value;\n\n\t              queue.push(child);\n\t            }\n\t          } catch (err) {\n\t            _didIteratorError = true;\n\t            _iteratorError = err;\n\t          } finally {\n\t            try {\n\t              if (!_iteratorNormalCompletion && _iterator.return) {\n\t                _iterator.return();\n\t              }\n\t            } finally {\n\t              if (_didIteratorError) {\n\t                throw _iteratorError;\n\t              }\n\t            }\n\t          }\n\t        }\n\t      }\n\t      return numberOfLeaves;\n\t    }\n\n\t    /**\n\t     * Draws the \"collapsed tip\".\n\t     *\n\t     * @param {number}\n\t     * @param {number}\n\t     */\n\n\t  }, {\n\t    key: 'drawCollapsed',\n\t    value: function drawCollapsed(centerX, centerY) {\n\t      var getCollapsedMeasurements = _treeTypes2.default[this.tree.treeType].getCollapsedMeasurements;\n\n\n\t      this.canvas.beginPath();\n\n\t      var _getCollapsedMeasurem = getCollapsedMeasurements(this),\n\t          angle = _getCollapsedMeasurem.angle,\n\t          radius = _getCollapsedMeasurem.radius;\n\n\t      var startAngle = this.angle - angle / 2;\n\t      var endAngle = this.angle + angle / 2;\n\n\t      this.canvas.moveTo(centerX, centerY);\n\t      this.canvas.arc(centerX, centerY, radius, startAngle, endAngle, false);\n\n\t      var gradient = this.canvas.createRadialGradient(centerX, centerY, radius, centerX, centerY, 0.2 * radius);\n\t      gradient.addColorStop(0, 'rgba(255, 255, 255, 0)');\n\t      gradient.addColorStop(1, this.tree.collapsedColour || this.getColour());\n\t      this.canvas.fillStyle = gradient;\n\n\t      this.canvas.fill();\n\n\t      this.canvas.closePath();\n\t    }\n\n\t    /**\n\t     * For aligned labels.\n\t     *\n\t     * @method\n\t     */\n\n\t  }, {\n\t    key: 'drawLabelConnector',\n\t    value: function drawLabelConnector() {\n\t      var _tree = this.tree,\n\t          highlightColour = _tree.highlightColour,\n\t          labelAlign = _tree.labelAlign;\n\n\t      this.canvas.save();\n\n\t      this.canvas.lineWidth = this.canvas.lineWidth / 4;\n\t      this.canvas.strokeStyle = this.isHighlighted ? highlightColour : this.getColour();\n\n\t      this.canvas.beginPath();\n\t      this.canvas.moveTo(this.getRadius(), 0);\n\t      this.canvas.lineTo(labelAlign.getLabelOffset(this) + this.getDiameter(), 0);\n\t      this.canvas.stroke();\n\t      this.canvas.closePath();\n\n\t      this.canvas.restore();\n\t    }\n\n\t    /**\n\t     * @method\n\t     */\n\n\t  }, {\n\t    key: 'drawLeaf',\n\t    value: function drawLeaf() {\n\t      var _tree2 = this.tree,\n\t          alignLabels = _tree2.alignLabels,\n\t          canvas = _tree2.canvas;\n\n\n\t      if (alignLabels) {\n\t        this.drawLabelConnector();\n\t      }\n\n\t      canvas.save();\n\n\t      _nodeRenderers2.default[this.nodeShape](canvas, this.getRadius(), this.getLeafStyle());\n\n\t      canvas.restore();\n\n\t      if (this.tree.showLabels || this.tree.hoverLabel && this.isHighlighted) {\n\t        this.drawLabel();\n\t      }\n\t    }\n\n\t    /**\n\t     * @param {number}\n\t     * @param {number}\n\t     */\n\n\t  }, {\n\t    key: 'drawHighlight',\n\t    value: function drawHighlight(centerX, centerY) {\n\t      this.canvas.save();\n\t      this.canvas.beginPath();\n\n\t      this.canvas.strokeStyle = this.tree.highlightColour;\n\t      this.canvas.lineWidth = this.getHighlightLineWidth();\n\t      var radius = this.getHighlightRadius();\n\t      this.canvas.arc(centerX, centerY, radius, 0, Angles.FULL, false);\n\n\t      this.canvas.stroke();\n\n\t      this.canvas.closePath();\n\t      this.canvas.restore();\n\t    }\n\n\t    /**\n\t     * @method\n\t     */\n\n\t  }, {\n\t    key: 'drawBranchLabels',\n\t    value: function drawBranchLabels() {\n\t      this.canvas.save();\n\t      var labelStyle = this.internalLabelStyle || this.tree.internalLabelStyle;\n\t      this.canvas.fillStyle = labelStyle.colour;\n\t      this.canvas.font = labelStyle.format + ' ' + labelStyle.textSize + 'pt ' + labelStyle.font;\n\t      this.canvas.textBaseline = 'middle';\n\t      this.canvas.textAlign = 'center';\n\t      var em = this.canvas.measureText('M').width * 2 / 3;\n\n\t      var x = this.tree.type.branchScalingAxis === 'y' ? this.centerx : (this.startx + this.centerx) / 2;\n\t      var y = this.tree.type.branchScalingAxis === 'x' ? this.centery : (this.starty + this.centery) / 2;\n\n\t      if (this.tree.showBranchLengthLabels && this.tree.branchLengthLabelPredicate(this)) {\n\t        this.canvas.fillText(this.branchLength.toFixed(2), x, y + em);\n\t      }\n\n\t      if (this.tree.showInternalNodeLabels && !this.leaf && this.label) {\n\t        this.canvas.fillText(this.label, x, y - em);\n\t      }\n\n\t      this.canvas.restore();\n\t    }\n\n\t    /**\n\t     * Draws the line of the branch.\n\t     */\n\n\t  }, {\n\t    key: 'drawNode',\n\t    value: function drawNode() {\n\t      var nodeRadius = this.getRadius();\n\t      /**\n\t       * theta = translation to center of node... ensures that the node edge is\n\t       * at the end of the branch so the branches don't look shorter than  they\n\t       * should\n\t       */\n\t      var theta = nodeRadius;\n\n\t      var centerX = this.leaf ? theta * Math.cos(this.angle) + this.centerx : this.centerx;\n\t      var centerY = this.leaf ? theta * Math.sin(this.angle) + this.centery : this.centery;\n\n\t      this.setNodeDimensions(centerX, centerY, nodeRadius);\n\n\t      if (this.collapsed) {\n\t        this.drawCollapsed(centerX, centerY);\n\t      } else if (this.leaf) {\n\t        this.canvas.save();\n\t        this.canvas.translate(this.centerx, this.centery);\n\t        this.canvas.rotate(this.angle);\n\n\t        this.drawLeaf();\n\n\t        this.canvas.restore();\n\t      }\n\n\t      if (this.isHighlighted) {\n\t        this.tree.highlighters.push(this.drawHighlight.bind(this, centerX, centerY));\n\t      }\n\n\t      if (this.tree.root !== this && this.tree.showBranchLengthLabels || this.tree.showInternalNodeLabels) {\n\t        this.drawBranchLabels();\n\t      }\n\t    }\n\n\t    /**\n\t     * Get property values of leaves under this branch.\n\t     *\n\t     * @param {string} - property name\n\t     * @returns {string[]}\n\t     */\n\n\t  }, {\n\t    key: 'getChildProperties',\n\t    value: function getChildProperties(property) {\n\t      if (this.leaf) {\n\t        // Fix for Issue #68\n\t        // Returning array, as expected\n\t        return [this[property]];\n\t      }\n\n\t      var children = [];\n\t      for (var x = 0; x < this.children.length; x++) {\n\t        children = children.concat(this.children[x].getChildProperties(property));\n\t      }\n\t      return children;\n\t    }\n\n\t    /**\n\t     * @returns {number}\n\t     */\n\n\t  }, {\n\t    key: 'getChildCount',\n\t    value: function getChildCount() {\n\t      if (this.leaf) return 1;\n\n\t      var children = 0;\n\t      for (var x = 0; x < this.children.length; x++) {\n\t        children += this.children[x].getChildCount();\n\t      }\n\t      return children;\n\t    }\n\n\t    /**\n\t     * @returns {number}\n\t     */\n\n\t  }, {\n\t    key: 'getChildYTotal',\n\t    value: function getChildYTotal() {\n\t      if (this.leaf) return this.centery;\n\n\t      var y = 0;\n\t      for (var i = 0; i < this.children.length; i++) {\n\t        y += this.children[i].getChildYTotal();\n\t      }\n\t      return y;\n\t    }\n\n\t    /**\n\t     * Set a boolean property of this branch and its descendants.\n\t     *\n\t     * @param {string}\n\t     * @param {boolean}\n\t     * @param {function=}\n\t     */\n\n\t  }, {\n\t    key: 'cascadeFlag',\n\t    value: function cascadeFlag(property, value, predicate) {\n\t      if (typeof this[property] === 'undefined') {\n\t        throw new Error('Unknown property: ' + property);\n\t      }\n\t      if (typeof predicate === 'undefined' || predicate(this, property, value)) {\n\t        this[property] = value;\n\t      }\n\t      var _iteratorNormalCompletion2 = true;\n\t      var _didIteratorError2 = false;\n\t      var _iteratorError2 = undefined;\n\n\t      try {\n\t        for (var _iterator2 = this.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t          var child = _step2.value;\n\n\t          child.cascadeFlag(property, value, predicate);\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError2 = true;\n\t        _iteratorError2 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t            _iterator2.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError2) {\n\t            throw _iteratorError2;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    /**\n\t     * Resets the coordinates and angle of this branch and its descendants.\n\t     */\n\n\t  }, {\n\t    key: 'reset',\n\t    value: function reset() {\n\t      var child;\n\t      var i;\n\n\t      this.startx = 0;\n\t      this.starty = 0;\n\t      this.centerx = 0;\n\t      this.centery = 0;\n\t      this.angle = null;\n\t      // this.totalBranchLength = 0;\n\t      this.minChildAngle = Angles.FULL;\n\t      this.maxChildAngle = 0;\n\t      for (i = 0; i < this.children.length; i++) {\n\t        try {\n\t          this.children[child].reset();\n\t        } catch (e) {\n\t          return e;\n\t        }\n\t      }\n\t    }\n\n\t    /**\n\t     * Set this branch to be the root.\n\t     */\n\n\t  }, {\n\t    key: 'redrawTreeFromBranch',\n\t    value: function redrawTreeFromBranch() {\n\t      if (this.collapsed) {\n\t        this.expand();\n\t      }\n\t      this.tree.redrawFromBranch(this);\n\t    }\n\n\t    /**\n\t     * Store this branch's children.\n\t     */\n\n\t  }, {\n\t    key: 'extractChildren',\n\t    value: function extractChildren() {\n\t      var _iteratorNormalCompletion3 = true;\n\t      var _didIteratorError3 = false;\n\t      var _iteratorError3 = undefined;\n\n\t      try {\n\t        for (var _iterator3 = this.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t          var child = _step3.value;\n\n\t          this.tree.storeNode(child);\n\t          child.extractChildren();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError3 = true;\n\t        _iteratorError3 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t            _iterator3.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError3) {\n\t            throw _iteratorError3;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    /**\n\t     * Walks up the tree looking for a collapsed branch.\n\t     *\n\t     * @returns {boolean}\n\t     */\n\n\t  }, {\n\t    key: 'hasCollapsedAncestor',\n\t    value: function hasCollapsedAncestor() {\n\t      if (this.parent) {\n\t        return this.parent.collapsed || this.parent.hasCollapsedAncestor();\n\t      }\n\t      return false;\n\t    }\n\n\t    /**\n\t     * @method\n\t     */\n\n\t  }, {\n\t    key: 'collapse',\n\t    value: function collapse() {\n\t      // don't collapse the node if it is a leaf... that would be silly!\n\t      this.collapsed = this.leaf === false;\n\t    }\n\n\t    /**\n\t     * @method\n\t     */\n\n\t  }, {\n\t    key: 'expand',\n\t    value: function expand() {\n\t      this.collapsed = false;\n\t    }\n\n\t    /**\n\t     * @method\n\t     */\n\n\t  }, {\n\t    key: 'toggleCollapsed',\n\t    value: function toggleCollapsed() {\n\t      if (this.collapsed) {\n\t        this.expand();\n\t      } else {\n\t        this.collapse();\n\t      }\n\t    }\n\n\t    /**\n\t     * Sums the length of all branches from this one back to the root.\n\t     */\n\n\t  }, {\n\t    key: 'setTotalLength',\n\t    value: function setTotalLength() {\n\t      var c;\n\n\t      if (this.parent) {\n\t        this.totalBranchLength = this.parent.totalBranchLength + this.branchLength;\n\t        if (this.totalBranchLength > this.tree.maxBranchLength) {\n\t          this.tree.maxBranchLength = this.totalBranchLength;\n\t        }\n\t      } else {\n\t        this.totalBranchLength = this.branchLength;\n\t        this.tree.maxBranchLength = this.totalBranchLength;\n\t      }\n\t      for (c = 0; c < this.children.length; c++) {\n\t        this.children[c].setTotalLength();\n\t      }\n\t    }\n\n\t    /**\n\t     * Add a child branch to this branch.\n\t     *\n\t     * @param node {Branch} the node to add as a child\n\t     */\n\n\t  }, {\n\t    key: 'addChild',\n\t    value: function addChild(node) {\n\t      node.parent = this;\n\t      node.tree = this.tree;\n\t      this.leaf = false;\n\t      this.children.push(node);\n\t    }\n\n\t    /**\n\t     * Return the node colour of all the nodes that are children of this one.\n\t     *\n\t     * @returns {string[]}\n\t     */\n\n\t  }, {\n\t    key: 'getChildColours',\n\t    value: function getChildColours() {\n\t      var colours = [];\n\n\t      this.children.forEach(function (branch) {\n\t        var colour = branch.children.length === 0 ? branch.colour : branch.getColour();\n\t        // only add each colour once.\n\t        if (colours.indexOf(colour) === -1) {\n\t          colours.push(colour);\n\t        }\n\t      });\n\n\t      return colours;\n\t    }\n\n\t    /**\n\t     * Get the colour(s) of the branch itself.\n\t     *\n\t     * @returns {string}\n\t     */\n\n\t  }, {\n\t    key: 'getColour',\n\t    value: function getColour(specifiedColour) {\n\t      if (this.selected) {\n\t        return this.tree.selectedColour;\n\t      }\n\n\t      return specifiedColour || this.colour || this.tree.branchColour;\n\t    }\n\n\t    /**\n\t     * Create a newick representation of this branch.\n\t     *\n\t     * @returns {string}\n\t     */\n\n\t  }, {\n\t    key: 'getNwk',\n\t    value: function getNwk() {\n\t      var isRoot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n\t      if (this.leaf) {\n\t        return this.label + ':' + this.branchLength;\n\t      }\n\n\t      var childNwks = this.children.map(function (child) {\n\t        return child.getNwk(false);\n\t      });\n\t      return '(' + childNwks.join(',') + '):' + this.branchLength + (isRoot ? ';' : '');\n\t    }\n\n\t    /**\n\t     * @returns {string}\n\t     */\n\n\t  }, {\n\t    key: 'getTextColour',\n\t    value: function getTextColour() {\n\t      if (this.selected) {\n\t        return this.tree.selectedColour;\n\t      }\n\n\t      if (this.isHighlighted) {\n\t        return this.tree.highlightColour;\n\t      }\n\n\t      if (this.tree.backColour && this.children.length) {\n\t        var childColours = this.getChildColours();\n\t        if (childColours.length === 1) {\n\t          return childColours[0];\n\t        }\n\t      }\n\t      return this.labelStyle.colour || this.colour || this.tree.branchColour;\n\t    }\n\n\t    /**\n\t     * Ensures the return value is always a string.\n\t     *\n\t     * @returns {string}\n\t     */\n\n\t  }, {\n\t    key: 'getLabel',\n\t    value: function getLabel() {\n\t      return this.label !== undefined && this.label !== null ? this.label : '';\n\t    }\n\n\t    /**\n\t     * @returns {number}\n\t     */\n\n\t  }, {\n\t    key: 'getTextSize',\n\t    value: function getTextSize() {\n\t      return this.labelStyle.textSize || this.tree.textSize;\n\t    }\n\n\t    /**\n\t     * @returns {string}\n\t     */\n\n\t  }, {\n\t    key: 'getFontString',\n\t    value: function getFontString() {\n\t      var font = this.labelStyle.font || this.tree.font;\n\t      return (this.labelStyle.format || '') + ' ' + this.getTextSize() + 'pt ' + font;\n\t    }\n\n\t    /**\n\t     * @returns {number} length of label in pixels\n\t     */\n\n\t  }, {\n\t    key: 'getLabelSize',\n\t    value: function getLabelSize() {\n\t      this.canvas.font = this.getFontString();\n\t      return this.canvas.measureText(this.getLabel()).width;\n\t    }\n\n\t    /**\n\t     * @returns {number}\n\t     */\n\n\t  }, {\n\t    key: 'getRadius',\n\t    value: function getRadius() {\n\t      var baseNodeSize = this.tree.baseNodeSize;\n\n\t      if (this.leaf) {\n\t        return baseNodeSize * this.radius;\n\t      }\n\t      return baseNodeSize / this.radius;\n\t    }\n\n\t    /**\n\t     * @returns {number}\n\t     */\n\n\t  }, {\n\t    key: 'getDiameter',\n\t    value: function getDiameter() {\n\t      return this.getRadius() * 2;\n\t    }\n\n\t    /**\n\t     * @returns {boolean}\n\t     */\n\n\t  }, {\n\t    key: 'hasLabelConnector',\n\t    value: function hasLabelConnector() {\n\t      if (!this.tree.alignLabels) {\n\t        return false;\n\t      }\n\t      return this.tree.labelAlign.getLabelOffset(this) > this.getDiameter();\n\t    }\n\n\t    /**\n\t     * Calculates label start position\n\t     * offset + aesthetic padding\n\t     *\n\t     * @return {number} x coordinate\n\t     */\n\n\t  }, {\n\t    key: 'getLabelStartX',\n\t    value: function getLabelStartX() {\n\t      var _getLeafStyle = this.getLeafStyle(),\n\t          lineWidth = _getLeafStyle.lineWidth;\n\n\t      var hasLabelConnector = this.hasLabelConnector();\n\n\t      var offset = this.getDiameter();\n\n\t      if (this.isHighlighted && !hasLabelConnector) {\n\t        offset += this.getHighlightSize() - this.getRadius();\n\t      }\n\n\t      return offset + Math.min(this.tree.labelPadding, this.tree.labelPadding / this.tree.zoom);\n\t    }\n\n\t    /**\n\t     * @returns {number}\n\t     */\n\n\t  }, {\n\t    key: 'getHighlightLineWidth',\n\t    value: function getHighlightLineWidth() {\n\t      return this.tree.highlightWidth / this.tree.zoom;\n\t    }\n\n\t    /**\n\t     * @returns {number}\n\t     */\n\n\t  }, {\n\t    key: 'getHighlightRadius',\n\t    value: function getHighlightRadius() {\n\t      var offset = this.getHighlightLineWidth() * this.tree.highlightSize;\n\n\t      offset += this.getLeafStyle().lineWidth / this.tree.highlightSize;\n\n\t      return this.leaf ? this.getRadius() + offset : offset * 0.666;\n\t    }\n\n\t    /**\n\t     * Combination of radius and line width\n\t     *\n\t     * @returns {number}\n\t     */\n\n\t  }, {\n\t    key: 'getHighlightSize',\n\t    value: function getHighlightSize() {\n\t      return this.getHighlightRadius() + this.getHighlightLineWidth();\n\t    }\n\n\t    /**\n\t     * Reverses the order of the children. Runs the prerenderer again.\n\t     *\n\t     * @method\n\t     */\n\n\t  }, {\n\t    key: 'rotate',\n\t    value: function rotate() {\n\t      var newChildren = [];\n\n\t      for (var i = this.children.length; i--;) {\n\t        newChildren.push(this.children[i]);\n\t      }\n\n\t      this.children = newChildren;\n\n\t      this.tree.extractNestedBranches();\n\t      this.tree.draw(true);\n\t    }\n\n\t    /**\n\t     * @returns {number} index of this branch in its parent's array.\n\t     */\n\n\t  }, {\n\t    key: 'getChildNo',\n\t    value: function getChildNo() {\n\t      return this.parent.children.indexOf(this);\n\t    }\n\n\t    /**\n\t     * @param {Object} options\n\t     * @param {string} options.colour\n\t     * @param {string} options.shape\n\t     * @param {number} options.size\n\t     * @param {Object} options.leafStyle See {@link Branch#leafStyle}\n\t     * @param {Object} options.labelStyle See {@link Branch#labelStyle}\n\t     */\n\n\t  }, {\n\t    key: 'setDisplay',\n\t    value: function setDisplay(_ref) {\n\t      var colour = _ref.colour,\n\t          shape = _ref.shape,\n\t          size = _ref.size,\n\t          leafStyle = _ref.leafStyle,\n\t          labelStyle = _ref.labelStyle;\n\n\t      if (colour) {\n\t        this.colour = colour;\n\t      }\n\t      if (shape) {\n\t        this.nodeShape = Shapes[shape] ? Shapes[shape] : shape;\n\t      }\n\t      if (size) {\n\t        this.radius = size;\n\t      }\n\t      if (leafStyle) {\n\t        this.leafStyle = leafStyle;\n\t      }\n\t      if (labelStyle) {\n\t        this.labelStyle = labelStyle;\n\t      }\n\t    }\n\n\t    /**\n\t     * @returns {number} the node radius plus label length if labels are shown\n\t     */\n\n\t  }, {\n\t    key: 'getTotalLength',\n\t    value: function getTotalLength() {\n\t      var length = this.getRadius();\n\n\t      if (this.tree.showLabels || this.tree.hoverLabel && this.isHighlighted) {\n\t        length += this.getLabelStartX() + this.getLabelSize();\n\t      }\n\n\t      return length;\n\t    }\n\n\t    /**\n\t     * @returns {Object} bounds\n\t     * @property {number} minx\n\t     * @property {number} miny\n\t     * @property {number} maxx\n\t     * @property {number} maxy\n\t     */\n\n\t  }, {\n\t    key: 'getBounds',\n\t    value: function getBounds() {\n\t      var tree = this.tree;\n\n\t      var x = tree.alignLabels ? tree.labelAlign.getX(this) : this.centerx;\n\t      var y = tree.alignLabels ? tree.labelAlign.getY(this) : this.centery;\n\t      var nodeSize = this.getRadius();\n\t      var totalLength = this.getTotalLength();\n\n\t      var minx = void 0;\n\t      var maxx = void 0;\n\t      var miny = void 0;\n\t      var maxy = void 0;\n\t      if (this.angle > Angles.QUARTER && this.angle < Angles.HALF + Angles.QUARTER) {\n\t        minx = x + totalLength * Math.cos(this.angle);\n\t        miny = y + totalLength * Math.sin(this.angle);\n\t        maxx = x - nodeSize;\n\t        maxy = y - nodeSize;\n\t      } else {\n\t        minx = x - nodeSize;\n\t        miny = y - nodeSize;\n\t        maxx = x + totalLength * Math.cos(this.angle);\n\t        maxy = y + totalLength * Math.sin(this.angle);\n\t      }\n\n\t      // uses a caching object to reduce garbage\n\t      var step = tree.prerenderer.getStep(tree) / 2;\n\t      _bounds.minx = Math.min(minx, maxx, x - step);\n\t      _bounds.miny = Math.min(miny, maxy, y - step);\n\t      _bounds.maxx = Math.max(minx, maxx, x + step);\n\t      _bounds.maxy = Math.max(miny, maxy, y + step);\n\n\t      return _bounds;\n\t    }\n\n\t    /**\n\t     * Merges global and local styles together.\n\t     *\n\t     * @returns {Object}\n\t     * @see Branch#leafStyle\n\t     */\n\n\t  }, {\n\t    key: 'getLeafStyle',\n\t    value: function getLeafStyle() {\n\t      var _leafStyle2 = this.leafStyle,\n\t          strokeStyle = _leafStyle2.strokeStyle,\n\t          fillStyle = _leafStyle2.fillStyle;\n\t      var zoom = this.tree.zoom;\n\n\t      // uses a caching object to reduce garbage\n\n\t      _leafStyle.strokeStyle = this.getColour(strokeStyle);\n\t      _leafStyle.fillStyle = this.getColour(fillStyle);\n\n\t      var lineWidth = typeof this.leafStyle.lineWidth !== 'undefined' ? this.leafStyle.lineWidth : this.tree.lineWidth;\n\n\t      _leafStyle.lineWidth = lineWidth / zoom;\n\n\t      return _leafStyle;\n\t    }\n\t  }, {\n\t    key: 'isHighlighted',\n\n\n\t    /**\n\t     * True if the branch is highlighted or hovered.\n\t     *\n\t     * @type boolean\n\t     */\n\t    get: function get() {\n\t      return this.highlighted || this.hovered;\n\t    }\n\n\t    /**\n\t     * The canvas {@link https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D drawing context} of the parent tree.\n\t     *\n\t     * @type CanvasRenderingContext2D\n\t     */\n\n\t  }, {\n\t    key: 'canvas',\n\t    get: function get() {\n\t      return this.tree.canvas;\n\t    }\n\t  }], [{\n\t    key: 'generateId',\n\t    value: function generateId() {\n\t      return 'pcn' + this.lastId++;\n\t    }\n\t  }]);\n\n\t  return Branch;\n\t}();\n\n\t/**\n\t * Static counter for generated ids.\n\t *\n\t * @static\n\t * @memberof Branch\n\t * @type number\n\t */\n\n\n\tBranch.lastId = 0;\n\n\texports.default = Branch;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _rectangular = __webpack_require__(9);\n\n\tvar _rectangular2 = _interopRequireDefault(_rectangular);\n\n\tvar _circular = __webpack_require__(14);\n\n\tvar _circular2 = _interopRequireDefault(_circular);\n\n\tvar _radial = __webpack_require__(17);\n\n\tvar _radial2 = _interopRequireDefault(_radial);\n\n\tvar _diagonal = __webpack_require__(20);\n\n\tvar _diagonal2 = _interopRequireDefault(_diagonal);\n\n\tvar _hierarchical = __webpack_require__(23);\n\n\tvar _hierarchical2 = _interopRequireDefault(_hierarchical);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = {\n\t  rectangular: _rectangular2.default,\n\t  circular: _circular2.default,\n\t  radial: _radial2.default,\n\t  diagonal: _diagonal2.default,\n\t  hierarchical: _hierarchical2.default\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _BranchRenderer = __webpack_require__(10);\n\n\tvar _BranchRenderer2 = _interopRequireDefault(_BranchRenderer);\n\n\tvar _Prerenderer = __webpack_require__(11);\n\n\tvar _Prerenderer2 = _interopRequireDefault(_Prerenderer);\n\n\tvar _branchRenderer = __webpack_require__(12);\n\n\tvar _branchRenderer2 = _interopRequireDefault(_branchRenderer);\n\n\tvar _prerenderer = __webpack_require__(13);\n\n\tvar _prerenderer2 = _interopRequireDefault(_prerenderer);\n\n\tvar _constants = __webpack_require__(6);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar labelAlign = {\n\t  getX: function getX(node) {\n\t    return node.tree.farthestNodeFromRootX * node.tree.currentBranchScale;\n\t  },\n\t  getY: function getY(node) {\n\t    return node.centery;\n\t  },\n\t  getLabelOffset: function getLabelOffset(node) {\n\t    return node.tree.farthestNodeFromRootX * node.tree.currentBranchScale - node.centerx;\n\t  }\n\t};\n\n\texports.default = {\n\t  branchRenderer: new _BranchRenderer2.default(_branchRenderer2.default),\n\t  prerenderer: new _Prerenderer2.default(_prerenderer2.default),\n\t  labelAlign: labelAlign,\n\t  branchScalingAxis: 'x',\n\t  getCollapsedMeasurements: function getCollapsedMeasurements(branch) {\n\t    return {\n\t      angle: _constants.Angles.QUARTER,\n\t      radius: branch.tree.step * branch.getNumberOfLeaves()\n\t    };\n\t  }\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\t/**\n\t * Draws a branch.\n\t *\n\t * @class\n\t */\n\tvar BranchRenderer = function () {\n\n\t  /**\n\t   * @constructor\n\t   * @param {Object} options\n\t   * @param {function} options.draw\n\t   * @param {function} [options.prepareChild]\n\t   */\n\t  function BranchRenderer(options) {\n\t    _classCallCheck(this, BranchRenderer);\n\n\t    if (!options || !options.draw) {\n\t      throw new Error('`draw` function is required for branch renderers');\n\t    }\n\n\t    this.draw = options.draw;\n\t    this.prepareChild = options.prepareChild;\n\t  }\n\n\t  /**\n\t   * @param {Tree}\n\t   * @param {Branch}\n\t   * @param {boolean=} - if true, rendering skipped.\n\t   */\n\n\n\t  _createClass(BranchRenderer, [{\n\t    key: 'render',\n\t    value: function render(tree, branch, collapse) {\n\t      var i;\n\t      if (collapse || !branch) return;\n\n\t      if (branch.selected) {\n\t        branch.canvas.fillStyle = tree.selectedColour;\n\t      } else {\n\t        branch.canvas.fillStyle = branch.colour;\n\t      }\n\t      branch.canvas.strokeStyle = branch.getColour();\n\n\t      this.draw(tree, branch);\n\n\t      if (branch.pruned) {\n\t        return;\n\t      }\n\n\t      branch.drawNode();\n\n\t      for (i = 0; i < branch.children.length; i++) {\n\t        if (this.prepareChild) {\n\t          this.prepareChild(branch, branch.children[i]);\n\t        }\n\t        this.render(tree, branch.children[i], branch.collapsed || collapse);\n\t      }\n\t    }\n\t  }]);\n\n\t  return BranchRenderer;\n\t}();\n\n\texports.default = BranchRenderer;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\t/**\n\t * Calculates the tree dimensions before the first draw.\n\t *\n\t * @class\n\t */\n\tvar Prerenderer = function () {\n\n\t  /**\n\t   * @constructor\n\t   * @param {Object} options\n\t   * @param {function} options.getStep - should return the space between each branch.\n\t   * @param {function} options.calculate\n\t   */\n\t  function Prerenderer(options) {\n\t    _classCallCheck(this, Prerenderer);\n\n\t    this.getStep = options.getStep;\n\t    this.calculate = options.calculate;\n\t  }\n\n\t  /**\n\t   * @param {Tree}\n\t   */\n\n\n\t  _createClass(Prerenderer, [{\n\t    key: \"run\",\n\t    value: function run(tree) {\n\t      var step = this.getStep(tree);\n\n\t      tree.root.startx = 0;\n\t      tree.root.starty = 0;\n\t      tree.root.centerx = 0;\n\t      tree.root.centery = 0;\n\t      tree.farthestNodeFromRootX = 0;\n\t      tree.farthestNodeFromRootY = 0;\n\t      tree.currentBranchScale = 1;\n\t      tree.step = step;\n\n\t      this.calculate(tree, step);\n\n\t      tree.initialBranchScalar = tree.branchScalar;\n\n\t      // Assign root startx and starty\n\t      tree.root.startx = tree.root.centerx;\n\t      tree.root.starty = tree.root.centery;\n\t      // Set font size for tree and its branches\n\t      tree.setFontSize(step);\n\t      tree.setMaxLabelLength();\n\t    }\n\t  }]);\n\n\t  return Prerenderer;\n\t}();\n\n\texports.default = Prerenderer;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  draw: function draw(tree, node) {\n\t    var branchLength = node.branchLength * tree.branchScalar;\n\n\t    node.angle = 0;\n\t    if (node.parent) {\n\t      node.centerx = node.startx + branchLength;\n\t    }\n\n\t    node.canvas.beginPath();\n\t    node.canvas.moveTo(node.startx, node.starty);\n\t    node.canvas.lineTo(node.startx, node.centery);\n\t    node.canvas.lineTo(node.centerx, node.centery);\n\t    node.canvas.stroke();\n\t    node.canvas.closePath();\n\t  },\n\t  prepareChild: function prepareChild(node, child) {\n\t    child.startx = node.centerx;\n\t    child.starty = node.centery;\n\t  }\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  getStep: function getStep(tree) {\n\t    return tree.fillCanvas ? tree.canvas.canvas.height / tree.leaves.length : Math.max(tree.canvas.canvas.height / tree.leaves.length, tree.leaves[0].getDiameter() + tree.labelPadding);\n\t  },\n\t  calculate: function calculate(tree, ystep) {\n\t    // Calculate branchScalar based on canvas width and total branch length\n\t    // This is used to transform the X coordinate based on the canvas width and no. of branches\n\t    tree.branchScalar = tree.canvas.canvas.width / tree.maxBranchLength;\n\n\t    // set initial positons of the branches\n\t    for (var i = 0; i < tree.leaves.length; i++) {\n\t      tree.leaves[i].angle = 0; // for rectangle\n\t      // Calculate and assign y coordinate for all the leaves\n\t      tree.leaves[i].centery = i > 0 ? tree.leaves[i - 1].centery + ystep : 0;\n\t      tree.leaves[i].centerx = tree.leaves[i].totalBranchLength * tree.branchScalar;\n\n\t      // Assign x,y position of the farthest node from the root\n\t      if (tree.leaves[i].centerx > tree.farthestNodeFromRootX) {\n\t        tree.farthestNodeFromRootX = tree.leaves[i].centerx;\n\t      }\n\t      if (tree.leaves[i].centery > tree.farthestNodeFromRootY) {\n\t        tree.farthestNodeFromRootY = tree.leaves[i].centery;\n\t      }\n\n\t      // Calculate and assign y coordinate for all the parent branches\n\t      for (var branch = tree.leaves[i]; branch.parent; branch = branch.parent) {\n\t        // Get all the children of a parent\n\t        var childrenArray = branch.parent.children;\n\t        // Assign parent's y coordinate\n\t        // Logic: Total ystep of all the children of this parent / 2\n\t        branch.parent.centery = (childrenArray[0].centery + childrenArray[childrenArray.length - 1].centery) / 2;\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _BranchRenderer = __webpack_require__(10);\n\n\tvar _BranchRenderer2 = _interopRequireDefault(_BranchRenderer);\n\n\tvar _Prerenderer = __webpack_require__(11);\n\n\tvar _Prerenderer2 = _interopRequireDefault(_Prerenderer);\n\n\tvar _branchRenderer = __webpack_require__(15);\n\n\tvar _branchRenderer2 = _interopRequireDefault(_branchRenderer);\n\n\tvar _prerenderer = __webpack_require__(16);\n\n\tvar _prerenderer2 = _interopRequireDefault(_prerenderer);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar labelAlign = {\n\t  getX: function getX(node) {\n\t    return node.centerx + node.labelOffsetX + node.getDiameter() * Math.cos(node.angle);\n\t  },\n\t  getY: function getY(node) {\n\t    return node.centery + node.labelOffsetY + node.getDiameter() * Math.sin(node.angle);\n\t  },\n\t  getLabelOffset: function getLabelOffset(node) {\n\t    return node.labelOffsetX / Math.cos(node.angle);\n\t  }\n\t};\n\n\texports.default = {\n\t  branchRenderer: new _BranchRenderer2.default(_branchRenderer2.default),\n\t  prerenderer: new _Prerenderer2.default(_prerenderer2.default),\n\t  labelAlign: labelAlign,\n\t  getCollapsedMeasurements: function getCollapsedMeasurements(branch) {\n\t    var _branch$tree = branch.tree,\n\t        maxBranchLength = _branch$tree.maxBranchLength,\n\t        branchScalar = _branch$tree.branchScalar,\n\t        step = _branch$tree.step;\n\n\t    return {\n\t      angle: branch.getNumberOfLeaves() * step,\n\t      radius: (maxBranchLength - branch.totalBranchLength) * branchScalar\n\t    };\n\t  },\n\t  calculateFontSize: function calculateFontSize(ystep) {\n\t    return Math.min(ystep * 10 + 4, 40);\n\t  }\n\t};\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  draw: function draw(tree, node) {\n\t    var branchLength = node.totalBranchLength * tree.branchScalar;\n\n\t    node.canvas.beginPath();\n\t    node.canvas.moveTo(node.startx, node.starty);\n\t    node.canvas.lineTo(node.centerx, node.centery);\n\t    node.canvas.stroke();\n\t    node.canvas.closePath();\n\n\t    node.canvas.strokeStyle = node.getColour();\n\n\t    if (node.children.length > 1 && !node.collapsed) {\n\t      node.canvas.beginPath();\n\t      node.canvas.arc(0, 0, branchLength, node.minChildAngle, node.maxChildAngle, node.maxChildAngle < node.minChildAngle);\n\t      node.canvas.stroke();\n\t      node.canvas.closePath();\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _utils = __webpack_require__(2);\n\n\tvar Angles = _utils.constants.Angles;\n\texports.default = {\n\t  getStep: function getStep(tree) {\n\t    return Angles.FULL / tree.leaves.length;\n\t  },\n\t  calculate: function calculate(tree, step) {\n\t    tree.branchScalar = Math.min(tree.canvas.canvas.width, tree.canvas.canvas.height) / tree.maxBranchLength;\n\t    // work out radius of tree and the make branch scalar proportinal to the\n\t    var r = tree.leaves.length * tree.leaves[0].getDiameter() / Angles.FULL;\n\t    if (tree.branchScalar * tree.maxBranchLength > r) {\n\t      r = tree.branchScalar * tree.maxBranchLength;\n\t    } else {\n\t      tree.branchScalar = r / tree.maxBranchLength;\n\t    }\n\n\t    for (var i = 0; i < tree.leaves.length; i++) {\n\t      var node = tree.leaves[i];\n\n\t      node.angle = step * i;\n\t      node.startx = node.parent.totalBranchLength * tree.branchScalar * Math.cos(node.angle);\n\t      node.starty = node.parent.totalBranchLength * tree.branchScalar * Math.sin(node.angle);\n\t      node.centerx = node.totalBranchLength * tree.branchScalar * Math.cos(node.angle);\n\t      node.centery = node.totalBranchLength * tree.branchScalar * Math.sin(node.angle);\n\t      node.labelOffsetX = r * Math.cos(node.angle) - node.centerx;\n\t      node.labelOffsetY = r * Math.sin(node.angle) - node.centery;\n\n\t      for (; node.parent; node = node.parent) {\n\t        if (node.getChildNo() === 0) {\n\t          node.parent.angle = node.angle;\n\t          node.parent.minChildAngle = node.angle;\n\t        }\n\t        if (node.getChildNo() === node.parent.children.length - 1) {\n\t          node.parent.maxChildAngle = node.angle;\n\t          node.parent.angle = (node.parent.minChildAngle + node.parent.maxChildAngle) / 2;\n\t          node.parent.startx = (node.parent.totalBranchLength - node.parent.branchLength) * tree.branchScalar * Math.cos(node.parent.angle);\n\t          node.parent.starty = (node.parent.totalBranchLength - node.parent.branchLength) * tree.branchScalar * Math.sin(node.parent.angle);\n\t          node.parent.centerx = node.parent.totalBranchLength * tree.branchScalar * Math.cos(node.parent.angle);\n\t          node.parent.centery = node.parent.totalBranchLength * tree.branchScalar * Math.sin(node.parent.angle);\n\t        } else {\n\t          break;\n\t        }\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _BranchRenderer = __webpack_require__(10);\n\n\tvar _BranchRenderer2 = _interopRequireDefault(_BranchRenderer);\n\n\tvar _Prerenderer = __webpack_require__(11);\n\n\tvar _Prerenderer2 = _interopRequireDefault(_Prerenderer);\n\n\tvar _branchRenderer = __webpack_require__(18);\n\n\tvar _branchRenderer2 = _interopRequireDefault(_branchRenderer);\n\n\tvar _prerenderer = __webpack_require__(19);\n\n\tvar _prerenderer2 = _interopRequireDefault(_prerenderer);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = {\n\t  branchRenderer: new _BranchRenderer2.default(_branchRenderer2.default),\n\t  prerenderer: new _Prerenderer2.default(_prerenderer2.default),\n\t  getCollapsedMeasurements: function getCollapsedMeasurements(branch) {\n\t    var _branch$tree = branch.tree,\n\t        maxBranchLength = _branch$tree.maxBranchLength,\n\t        branchScalar = _branch$tree.branchScalar,\n\t        step = _branch$tree.step;\n\n\t    return {\n\t      angle: branch.getNumberOfLeaves() * step,\n\t      radius: (maxBranchLength - branch.totalBranchLength) * branchScalar\n\t    };\n\t  },\n\t  calculateFontSize: function calculateFontSize(ystep) {\n\t    return Math.min(ystep * 50 + 5, 15);\n\t  }\n\t};\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  draw: function draw(tree, node) {\n\t    node.canvas.beginPath();\n\t    node.canvas.moveTo(node.startx, node.starty);\n\t    node.canvas.lineTo(node.centerx, node.centery);\n\t    node.canvas.stroke();\n\t    node.canvas.closePath();\n\t  }\n\t};\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _utils = __webpack_require__(2);\n\n\tvar Angles = _utils.constants.Angles;\n\n\n\tfunction prerenderNodes(tree, node) {\n\t  if (node.parent) {\n\t    node.startx = node.parent.centerx;\n\t    node.starty = node.parent.centery;\n\t  } else {\n\t    node.startx = 0;\n\t    node.starty = 0;\n\t  }\n\t  node.centerx = node.startx + node.branchLength * tree.branchScalar * Math.cos(node.angle);\n\t  node.centery = node.starty + node.branchLength * tree.branchScalar * Math.sin(node.angle);\n\n\t  for (var i = 0; i < node.children.length; i++) {\n\t    prerenderNodes(tree, node.children[i]);\n\t  }\n\t}\n\n\texports.default = {\n\t  getStep: function getStep(tree) {\n\t    return Angles.FULL / tree.leaves.length;\n\t  },\n\t  calculate: function calculate(tree, step) {\n\t    tree.branchScalar = Math.min(tree.canvas.canvas.width, tree.canvas.canvas.height) / tree.maxBranchLength;\n\n\t    for (var i = 0.0; i < tree.leaves.length; i += 1.0) {\n\t      tree.leaves[i].angle = step * i;\n\t      tree.leaves[i].centerx = tree.leaves[i].totalBranchLength * tree.branchScalar * Math.cos(tree.leaves[i].angle);\n\t      tree.leaves[i].centery = tree.leaves[i].totalBranchLength * tree.branchScalar * Math.sin(tree.leaves[i].angle);\n\n\t      for (var node = tree.leaves[i]; node.parent; node = node.parent) {\n\t        if (node.getChildNo() === 0) {\n\t          node.parent.angle = 0;\n\t        }\n\t        node.parent.angle += node.angle * node.getChildCount();\n\t        if (node.getChildNo() === node.parent.children.length - 1) {\n\t          node.parent.angle = node.parent.angle / node.parent.getChildCount();\n\t        } else {\n\t          break;\n\t        }\n\t      }\n\t    }\n\n\t    prerenderNodes(tree, tree.root);\n\t  }\n\t};\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _BranchRenderer = __webpack_require__(10);\n\n\tvar _BranchRenderer2 = _interopRequireDefault(_BranchRenderer);\n\n\tvar _Prerenderer = __webpack_require__(11);\n\n\tvar _Prerenderer2 = _interopRequireDefault(_Prerenderer);\n\n\tvar _branchRenderer = __webpack_require__(21);\n\n\tvar _branchRenderer2 = _interopRequireDefault(_branchRenderer);\n\n\tvar _prerenderer = __webpack_require__(22);\n\n\tvar _prerenderer2 = _interopRequireDefault(_prerenderer);\n\n\tvar _constants = __webpack_require__(6);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = {\n\t  branchRenderer: new _BranchRenderer2.default(_branchRenderer2.default),\n\t  prerenderer: new _Prerenderer2.default(_prerenderer2.default),\n\t  calculateFontSize: function calculateFontSize(ystep) {\n\t    return Math.min(ystep / 2, 10);\n\t  },\n\t  getCollapsedMeasurements: function getCollapsedMeasurements(branch) {\n\t    return {\n\t      angle: _constants.Angles.QUARTER,\n\t      radius: branch.tree.step * branch.getNumberOfLeaves()\n\t    };\n\t  }\n\t};\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  draw: function draw(tree, node) {\n\t    node.angle = 0;\n\t    node.canvas.beginPath();\n\n\t    node.canvas.moveTo(node.startx, node.starty);\n\t    node.canvas.lineTo(node.centerx, node.centery);\n\t    node.canvas.stroke();\n\n\t    node.canvas.closePath();\n\t  },\n\t  prepareChild: function prepareChild(node, child) {\n\t    child.startx = node.centerx;\n\t    child.starty = node.centery;\n\t  }\n\t};\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _utils = __webpack_require__(2);\n\n\tvar Angles = _utils.constants.Angles;\n\texports.default = {\n\t  getStep: function getStep(tree) {\n\t    return Math.max(tree.canvas.canvas.height / tree.leaves.length, tree.leaves[0].getDiameter() + tree.labelPadding);\n\t  },\n\t  calculate: function calculate(tree, ystep) {\n\t    for (var i = 0; i < tree.leaves.length; i++) {\n\t      tree.leaves[i].centerx = 0;\n\t      tree.leaves[i].centery = i > 0 ? tree.leaves[i - 1].centery + ystep : 0;\n\t      tree.leaves[i].angle = 0;\n\n\t      for (var node = tree.leaves[i]; node.parent; node = node.parent) {\n\t        if (node.getChildNo() === node.parent.children.length - 1) {\n\t          node.parent.centery = node.parent.getChildYTotal() / node.parent.getChildCount(); // (node.parent.children.length - 1);\n\t          node.parent.centerx = node.parent.children[0].centerx + (node.parent.children[0].centery - node.parent.centery) * Math.tan(Angles.FORTYFIVE);\n\t          for (var j = 0; j < node.parent.children.length; j++) {\n\t            node.parent.children[j].startx = node.parent.centerx;\n\t            node.parent.children[j].starty = node.parent.centery;\n\t          }\n\t        } else {\n\t          break;\n\t        }\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _BranchRenderer = __webpack_require__(10);\n\n\tvar _BranchRenderer2 = _interopRequireDefault(_BranchRenderer);\n\n\tvar _Prerenderer = __webpack_require__(11);\n\n\tvar _Prerenderer2 = _interopRequireDefault(_Prerenderer);\n\n\tvar _branchRenderer = __webpack_require__(24);\n\n\tvar _branchRenderer2 = _interopRequireDefault(_branchRenderer);\n\n\tvar _prerenderer = __webpack_require__(25);\n\n\tvar _prerenderer2 = _interopRequireDefault(_prerenderer);\n\n\tvar _constants = __webpack_require__(6);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar labelAlign = {\n\t  getX: function getX(node) {\n\t    return node.centerx;\n\t  },\n\t  getY: function getY(node) {\n\t    return node.tree.farthestNodeFromRootY * node.tree.currentBranchScale;\n\t  },\n\t  getLabelOffset: function getLabelOffset(node) {\n\t    return node.tree.farthestNodeFromRootY * node.tree.currentBranchScale - node.centery;\n\t  }\n\t};\n\n\texports.default = {\n\t  branchRenderer: new _BranchRenderer2.default(_branchRenderer2.default),\n\t  prerenderer: new _Prerenderer2.default(_prerenderer2.default),\n\t  labelAlign: labelAlign,\n\t  branchScalingAxis: 'y',\n\t  getCollapsedMeasurements: function getCollapsedMeasurements(branch) {\n\t    return {\n\t      angle: _constants.Angles.QUARTER,\n\t      radius: branch.tree.step * branch.getNumberOfLeaves()\n\t    };\n\t  }\n\t};\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  draw: function draw(tree, node) {\n\t    var branchLength = node.branchLength * tree.branchScalar;\n\n\t    if (node.parent) {\n\t      node.centery = node.starty + branchLength;\n\t    }\n\n\t    node.canvas.beginPath();\n\n\t    if (node !== node.tree.root) {\n\t      node.canvas.moveTo(node.startx, node.starty);\n\t      node.canvas.lineTo(node.centerx, node.starty);\n\t    }\n\n\t    node.canvas.lineTo(node.centerx, node.centery);\n\t    node.canvas.stroke();\n\n\t    node.canvas.closePath();\n\t  },\n\t  prepareChild: function prepareChild(node, child) {\n\t    child.startx = node.centerx;\n\t    child.starty = node.centery;\n\t  }\n\t};\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _utils = __webpack_require__(2);\n\n\tvar Angles = _utils.constants.Angles;\n\texports.default = {\n\t  getStep: function getStep(tree) {\n\t    return tree.fillCanvas ? tree.canvas.canvas.width / tree.leaves.length : Math.max(tree.canvas.canvas.width / tree.leaves.length, tree.leaves[0].getDiameter() + tree.labelPadding);\n\t  },\n\t  calculate: function calculate(tree, xstep) {\n\t    tree.branchScalar = tree.canvas.canvas.height / tree.maxBranchLength;\n\n\t    for (var i = 0; i < tree.leaves.length; i++) {\n\t      tree.leaves[i].angle = Angles.QUARTER;\n\t      tree.leaves[i].centerx = i > 0 ? tree.leaves[i - 1].centerx + xstep : 0;\n\t      tree.leaves[i].centery = tree.leaves[i].totalBranchLength * tree.branchScalar;\n\n\t      for (var node = tree.leaves[i]; node.parent; node = node.parent) {\n\t        if (node.getChildNo() === 0) {\n\t          node.parent.centerx = node.centerx;\n\t        }\n\n\t        if (node.getChildNo() === node.parent.children.length - 1) {\n\t          node.parent.angle = Angles.QUARTER;\n\t          node.parent.centerx = (node.parent.centerx + node.centerx) / 2;\n\t          node.parent.centery = node.parent.totalBranchLength * tree.branchScalar;\n\t          for (var j = 0; j < node.parent.children.length; j++) {\n\t            node.parent.children[j].startx = node.parent.centerx;\n\t            node.parent.children[j].starty = node.parent.centery;\n\t          }\n\t        } else {\n\t          break;\n\t        }\n\t      }\n\t      // Assign x,y position of the farthest node from the root\n\t      if (tree.leaves[i].centerx > tree.farthestNodeFromRootX) {\n\t        tree.farthestNodeFromRootX = tree.leaves[i].centerx;\n\t      }\n\t      if (tree.leaves[i].centery > tree.farthestNodeFromRootY) {\n\t        tree.farthestNodeFromRootY = tree.leaves[i].centery;\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _utils = __webpack_require__(2);\n\n\tvar Angles = _utils.constants.Angles;\n\n\n\tfunction drawConnector(canvas, connectingOffset) {\n\t  canvas.beginPath();\n\t  canvas.moveTo(0, 0);\n\t  canvas.lineTo(connectingOffset, 0);\n\t  canvas.stroke();\n\t  canvas.closePath();\n\t}\n\n\tfunction commitPath(canvas, _ref) {\n\t  var lineWidth = _ref.lineWidth,\n\t      strokeStyle = _ref.strokeStyle,\n\t      fillStyle = _ref.fillStyle;\n\n\t  canvas.lineWidth = lineWidth;\n\t  canvas.strokeStyle = strokeStyle;\n\t  canvas.fillStyle = fillStyle;\n\n\t  canvas.fill();\n\t  if (lineWidth > 0 && strokeStyle !== fillStyle) {\n\t    canvas.stroke();\n\t  }\n\t}\n\n\tvar lengthOfSquareSide = function lengthOfSquareSide(radius) {\n\t  return radius * Math.sqrt(2);\n\t};\n\n\t/**\n\t * @function nodeRenderer\n\t * @description A pure function to render a leaf.\n\t *\n\t * @param {CanvasRenderingContext2D} canvas - See {@link Tree#canvas}\n\t * @param {number} radius - See {@link Branch#radius}\n\t * @param {Object} style - See {@link Branch#leafStyle}\n\t */\n\n\texports.default = {\n\t  circle: function circle(canvas, radius, style) {\n\t    // circle takes same area as square inside given radius\n\t    var scaledArea = Math.pow(lengthOfSquareSide(radius), 2);\n\t    var scaledRadius = Math.sqrt(scaledArea / Math.PI);\n\n\t    drawConnector(canvas, radius - scaledRadius);\n\n\t    canvas.beginPath();\n\t    canvas.arc(radius, 0, scaledRadius, 0, Angles.FULL, false);\n\t    canvas.closePath();\n\n\t    commitPath(canvas, style);\n\t  },\n\t  square: function square(canvas, radius, style) {\n\t    var lengthOfSide = lengthOfSquareSide(radius);\n\t    var startX = radius - lengthOfSide / 2;\n\n\t    drawConnector(canvas, startX);\n\n\t    canvas.beginPath();\n\t    canvas.moveTo(startX, 0);\n\t    canvas.lineTo(startX, lengthOfSide / 2);\n\t    canvas.lineTo(startX + lengthOfSide, lengthOfSide / 2);\n\t    canvas.lineTo(startX + lengthOfSide, -lengthOfSide / 2);\n\t    canvas.lineTo(startX, -lengthOfSide / 2);\n\t    canvas.lineTo(startX, 0);\n\t    canvas.closePath();\n\n\t    commitPath(canvas, style);\n\t  },\n\t  star: function star(canvas, radius, style) {\n\t    var cx = radius;\n\t    var cy = 0;\n\t    var spikes = 5;\n\t    var outerRadius = radius;\n\t    var innerRadius = outerRadius * 0.5;\n\t    var step = Math.PI / spikes;\n\n\t    drawConnector(canvas, outerRadius - innerRadius);\n\n\t    var rot = Math.PI / 2 * 3;\n\n\t    canvas.beginPath();\n\t    canvas.moveTo(cx, cy - outerRadius);\n\t    for (var i = 0; i < spikes; i++) {\n\t      var x = cx + Math.cos(rot) * outerRadius;\n\t      var y = cy + Math.sin(rot) * outerRadius;\n\t      canvas.lineTo(x, y);\n\t      rot += step;\n\n\t      x = cx + Math.cos(rot) * innerRadius;\n\t      y = cy + Math.sin(rot) * innerRadius;\n\t      canvas.lineTo(x, y);\n\t      rot += step;\n\t    }\n\t    canvas.lineTo(cx, cy - outerRadius);\n\t    canvas.closePath();\n\n\t    commitPath(canvas, style);\n\t  },\n\t  triangle: function triangle(canvas, radius, style) {\n\t    var lengthOfSide = 2 * radius * Math.cos(30 * Math.PI / 180);\n\t    var height = Math.sqrt(3) / 2 * lengthOfSide;\n\t    var midpoint = 1 / Math.sqrt(3) * (lengthOfSide / 2);\n\n\t    drawConnector(canvas, radius - midpoint);\n\n\t    canvas.beginPath();\n\t    canvas.moveTo(radius, midpoint);\n\t    canvas.lineTo(radius + lengthOfSide / 2, midpoint);\n\t    canvas.lineTo(radius, -(height - midpoint));\n\t    canvas.lineTo(radius - lengthOfSide / 2, midpoint);\n\t    canvas.lineTo(radius, midpoint);\n\t    canvas.closePath();\n\n\t    commitPath(canvas, style);\n\t  }\n\t};\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\t/**\n\t * Tooltip base class\n\t *\n\t * @class\n\t */\n\tvar Tooltip = function () {\n\t  /**\n\t   * @constructor\n\t   * @param {Tree} tree instance\n\t   * @param {Object} [options]\n\t   * @param {string} [options.className=phylocanvas-tooltip]\n\t   * @param {HTMLElement} [options.element=document.createElement('div')]\n\t   * @param {number} [options.zIndex=2000]\n\t   * @param {HTMLElement} [options.parent=tree.containerElement]\n\t   */\n\t  function Tooltip(tree) {\n\t    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n\t        _ref$className = _ref.className,\n\t        className = _ref$className === undefined ? 'phylocanvas-tooltip' : _ref$className,\n\t        _ref$element = _ref.element,\n\t        element = _ref$element === undefined ? document.createElement('div') : _ref$element,\n\t        _ref$zIndex = _ref.zIndex,\n\t        zIndex = _ref$zIndex === undefined ? 2000 : _ref$zIndex,\n\t        _ref$parent = _ref.parent,\n\t        parent = _ref$parent === undefined ? tree.containerElement : _ref$parent;\n\n\t    _classCallCheck(this, Tooltip);\n\n\t    this.tree = tree;\n\t    this.element = element;\n\t    this.element.className = className;\n\t    this.element.style.display = 'none';\n\t    this.element.style.position = 'fixed';\n\t    this.element.style.zIndex = zIndex;\n\t    this.closed = true;\n\n\t    parent.appendChild(this.element);\n\t  }\n\n\t  /**\n\t   * @method\n\t   */\n\n\n\t  _createClass(Tooltip, [{\n\t    key: 'close',\n\t    value: function close() {\n\t      this.element.style.display = 'none';\n\t      this.closed = true;\n\t    }\n\n\t    /**\n\t     * @param {number} [x=100]\n\t     * @param {number} [y=100]\n\t     * @param {Branch} [node]\n\t     */\n\n\t  }, {\n\t    key: 'open',\n\t    value: function open() {\n\t      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n\t      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n\t      var node = arguments[2];\n\n\t      while (this.element.hasChildNodes()) {\n\t        this.element.removeChild(this.element.firstChild);\n\t      }\n\n\t      this.createContent(node);\n\n\t      this.element.style.top = y + 'px';\n\t      this.element.style.left = x + 'px';\n\n\t      this.element.style.display = 'block';\n\n\t      this.closed = false;\n\t    }\n\n\t    /**\n\t     * @throws an error if not overridden by a subclass.\n\t     */\n\n\t  }, {\n\t    key: 'createContent',\n\t    value: function createContent() {\n\t      throw new Error('Not implemented');\n\t    }\n\t  }]);\n\n\t  return Tooltip;\n\t}();\n\n\texports.default = Tooltip;\n\n\t// named export cannot have a doclet\n\t// @extends not working well\n\n\tvar ChildNodesTooltip = exports.ChildNodesTooltip = function (_Tooltip) {\n\t  _inherits(ChildNodesTooltip, _Tooltip);\n\n\t  /**\n\t   * Tooltip displaying number of child nodes.\n\t   *\n\t   * @constructor\n\t   * @param {Tree} tree instance\n\t   * @param {Object} [options]\n\t   * @see Tooltip\n\t   */\n\t  function ChildNodesTooltip(tree, options) {\n\t    _classCallCheck(this, ChildNodesTooltip);\n\n\t    var _this = _possibleConstructorReturn(this, (ChildNodesTooltip.__proto__ || Object.getPrototypeOf(ChildNodesTooltip)).call(this, tree, options));\n\n\t    _this.element.style.background = 'rgba(97, 97, 97, 0.9)';\n\t    _this.element.style.color = '#fff';\n\t    _this.element.style.cursor = 'pointer';\n\t    _this.element.style.padding = '8px';\n\t    _this.element.style.marginTop = '16px';\n\t    _this.element.style.borderRadius = '2px';\n\t    _this.element.style.textAlign = 'center';\n\t    _this.element.style.fontFamily = _this.tree.font || 'sans-serif';\n\t    _this.element.style.fontSize = '10px';\n\t    _this.element.style.fontWeight = '500';\n\t    return _this;\n\t  }\n\n\t  /**\n\t   * Adds a text node containing the number of children.\n\t   * @override\n\t   */\n\n\n\t  _createClass(ChildNodesTooltip, [{\n\t    key: 'createContent',\n\t    value: function createContent(node) {\n\t      var textNode = document.createTextNode(node.getChildProperties('id').length);\n\t      this.element.appendChild(textNode);\n\t    }\n\t  }]);\n\n\t  return ChildNodesTooltip;\n\t}(Tooltip);\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _Parser = __webpack_require__(29);\n\n\tvar _Parser2 = _interopRequireDefault(_Parser);\n\n\tvar _newick = __webpack_require__(30);\n\n\tvar _newick2 = _interopRequireDefault(_newick);\n\n\tvar _nexus = __webpack_require__(31);\n\n\tvar _nexus2 = _interopRequireDefault(_nexus);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = {\n\t  nexus: new _Parser2.default(_nexus2.default),\n\t  newick: new _Parser2.default(_newick2.default)\n\t};\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tvar Parser = function () {\n\t  function Parser(_ref) {\n\t    var format = _ref.format,\n\t        parseFn = _ref.parseFn,\n\t        fileExtension = _ref.fileExtension,\n\t        validator = _ref.validator;\n\n\t    _classCallCheck(this, Parser);\n\n\t    this.format = format;\n\t    this.parseFn = parseFn;\n\t    this.fileExtension = fileExtension;\n\t    this.validator = validator;\n\t  }\n\n\t  _createClass(Parser, [{\n\t    key: \"parse\",\n\t    value: function parse(_ref2, callback) {\n\t      var formatString = _ref2.formatString,\n\t          root = _ref2.root,\n\t          _ref2$options = _ref2.options,\n\t          options = _ref2$options === undefined ? { validate: true } : _ref2$options;\n\n\t      if (formatString.match(this.validator) || options.validate === false) {\n\t        return this.parseFn({ string: formatString, root: root, options: options }, callback);\n\t      }\n\t      return callback(new Error(\"Format string does not validate as \\\"\" + this.format + \"\\\"\"));\n\t    }\n\t  }]);\n\n\t  return Parser;\n\t}();\n\n\texports.default = Parser;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _Branch = __webpack_require__(7);\n\n\tvar _Branch2 = _interopRequireDefault(_Branch);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar format = 'newick';\n\tvar fileExtension = /\\.nwk$/;\n\tvar validator = /^[\\w\\W\\.\\*\\:(\\),-\\/]+;?\\s*$/gi;\n\n\tfunction isTerminatingChar(terminatingChar) {\n\t  return this === terminatingChar;\n\t}\n\n\tvar labelTerminatingChars = [':', ',', ')', ';'];\n\n\tfunction parseLabel(string) {\n\t  var label = '';\n\t  var _iteratorNormalCompletion = true;\n\t  var _didIteratorError = false;\n\t  var _iteratorError = undefined;\n\n\t  try {\n\t    for (var _iterator = string[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t      var char = _step.value;\n\n\t      if (labelTerminatingChars.some(isTerminatingChar.bind(char))) {\n\t        break;\n\t      }\n\t      label += char;\n\t    }\n\t  } catch (err) {\n\t    _didIteratorError = true;\n\t    _iteratorError = err;\n\t  } finally {\n\t    try {\n\t      if (!_iteratorNormalCompletion && _iterator.return) {\n\t        _iterator.return();\n\t      }\n\t    } finally {\n\t      if (_didIteratorError) {\n\t        throw _iteratorError;\n\t      }\n\t    }\n\t  }\n\n\t  return label;\n\t}\n\n\tfunction parseAnnotations(label, branch) {\n\t  var segments = label.split('**');\n\t  var displayOptions = {};\n\t  branch.id = segments[0];\n\t  if (segments.length === 1) return;\n\t  segments = segments[1].split('*');\n\n\t  for (var b = 0; b < segments.length; b += 2) {\n\t    var value = segments[b + 1];\n\t    switch (segments[b]) {\n\t      case 'nsz':\n\t        displayOptions.size = window.parseInt(value);\n\t        break;\n\t      case 'nsh':\n\t        displayOptions.shape = value;\n\t        break;\n\t      case 'ncol':\n\t        displayOptions.colour = value;\n\t        break;\n\t      default:\n\t        break;\n\t    }\n\t  }\n\t  branch.setDisplay(displayOptions);\n\t}\n\n\tvar nodeTerminatingChars = [')', ',', ';'];\n\n\tfunction parseBranchLength(string) {\n\t  var nodeLength = '';\n\t  var _iteratorNormalCompletion2 = true;\n\t  var _didIteratorError2 = false;\n\t  var _iteratorError2 = undefined;\n\n\t  try {\n\t    for (var _iterator2 = string[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t      var char = _step2.value;\n\n\t      if (nodeTerminatingChars.some(isTerminatingChar.bind(char))) {\n\t        break;\n\t      }\n\t      nodeLength += char;\n\t    }\n\t  } catch (err) {\n\t    _didIteratorError2 = true;\n\t    _iteratorError2 = err;\n\t  } finally {\n\t    try {\n\t      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t        _iterator2.return();\n\t      }\n\t    } finally {\n\t      if (_didIteratorError2) {\n\t        throw _iteratorError2;\n\t      }\n\t    }\n\t  }\n\n\t  return nodeLength;\n\t}\n\n\tfunction parseBranch(branch, string, index) {\n\t  var label = parseLabel(string.slice(index));\n\t  var postLabelIndex = index + label.length;\n\t  var branchLengthStr = '';\n\t  if (label.match(/\\*/)) {\n\t    parseAnnotations(label, branch);\n\t  }\n\n\t  if (string[postLabelIndex] === ':') {\n\t    branchLengthStr = parseBranchLength(string.slice(postLabelIndex + 1));\n\t    branch.branchLength = Math.max(parseFloat(branchLengthStr), 0);\n\t  } else {\n\t    branch.branchLength = 0;\n\t  }\n\n\t  if (label) {\n\t    branch.label = label;\n\t  }\n\t  branch.id = label || _Branch2.default.generateId();\n\t  return postLabelIndex + branchLengthStr.length;\n\t}\n\n\tfunction parseFn(_ref, callback) {\n\t  var string = _ref.string,\n\t      root = _ref.root;\n\n\t  var cleanString = string.replace(/(\\r|\\n)/g, '');\n\t  var currentNode = root;\n\n\t  for (var i = 0; i < cleanString.length; i++) {\n\t    var node = void 0;\n\t    switch (cleanString[i]) {\n\t      case '(':\n\t        // new Child\n\t        node = new _Branch2.default();\n\t        currentNode.addChild(node);\n\t        currentNode = node;\n\t        break;\n\t      case ')':\n\t        // return to parent\n\t        currentNode = currentNode.parent;\n\t        break;\n\t      case ',':\n\t        // new sibling\n\t        node = new _Branch2.default();\n\t        currentNode.parent.addChild(node);\n\t        currentNode = node;\n\t        break;\n\t      case ';':\n\t        break;\n\t      default:\n\t        try {\n\t          i = parseBranch(currentNode, cleanString, i);\n\t        } catch (e) {\n\t          return callback(e);\n\t        }\n\t        break;\n\t    }\n\t  }\n\t  return callback();\n\t}\n\n\texports.default = {\n\t  format: format,\n\t  fileExtension: fileExtension,\n\t  validator: validator,\n\t  parseFn: parseFn\n\t};\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _newick = __webpack_require__(30);\n\n\tvar format = 'nexus';\n\tvar fileExtension = /\\.n(ex|xs)$/;\n\tvar validator = /^#NEXUS[\\s\\n;\\w\\W\\.\\*\\:(\\),-=\\[\\]\\/&]+$/i;\n\n\tfunction parseFn(_ref, callback) {\n\t  var string = _ref.string,\n\t      root = _ref.root,\n\t      options = _ref.options;\n\n\t  if (!string.match(/BEGIN TREES/gi)) {\n\t    return callback(new Error('The nexus file does not contain a tree block'));\n\t  }\n\n\t  var name = options.name;\n\n\t  // get everything between BEGIN TREES and next END;\n\n\t  var treeSection = string.match(/BEGIN TREES;[\\S\\s]+END;/i)[0].replace(/BEGIN TREES;\\n/i, '').replace(/END;/i, '');\n\t  // get translate section\n\n\t  var leafNameObject = {};\n\t  var translateSection = treeSection.match(/TRANSLATE[^;]+;/i);\n\t  if (translateSection && translateSection.length) {\n\t    translateSection = translateSection[0];\n\t    //remove translate section from tree section\n\t    treeSection = treeSection.replace(translateSection, '');\n\n\t    //parse translate section into kv pairs\n\t    translateSection = translateSection.replace(/translate|;/gi, '');\n\n\t    var tIntArr = translateSection.split(',');\n\t    for (var i = 0; i < tIntArr.length; i++) {\n\t      var ia = tIntArr[i].trim().replace('\\n', '').split(' ');\n\t      if (ia[0] && ia[1]) {\n\t        leafNameObject[ia[0].trim()] = ia[1].trim();\n\t      }\n\t    }\n\t  }\n\n\t  // find each line starting with tree.\n\t  var tArr = treeSection.split('\\n');\n\t  var trees = {};\n\t  // id name is '' or does not exist, ask user to choose which tree.\n\t  for (var _i = 0; _i < tArr.length; _i++) {\n\t    if (tArr[_i].trim() === '') continue;\n\t    var s = tArr[_i].replace(/tree\\s/i, '');\n\t    if (!name) {\n\t      name = s.trim().match(/^\\w+/)[0];\n\t    }\n\t    trees[name] = s.trim().match(/[\\S]*$/)[0];\n\t  }\n\t  if (!trees[name]) {\n\t    return new Error('tree ' + name + ' does not exist in this NEXUS file');\n\t  }\n\n\t  (0, _newick.parseFn)({ string: trees[name].trim(), root: root }, function (error) {\n\t    if (error) {\n\t      return callback(error);\n\t    }\n\n\t    callback();\n\n\t    // translate in accordance with translate block\n\t    if (leafNameObject) {\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\n\t      try {\n\t        for (var _iterator = Object.keys(leafNameObject)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          var n = _step.value;\n\n\t          var branches = root.tree.branches;\n\t          var branch = branches[n];\n\t          delete branches[n];\n\t          branch.id = leafNameObject[n];\n\t          branches[branch.id] = branch;\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\n\t      root.tree.draw();\n\t    }\n\t  });\n\t}\n\n\texports.default = {\n\t  parseFn: parseFn,\n\t  format: format,\n\t  fileExtension: fileExtension,\n\t  validator: validator\n\t};\n\n/***/ }\n/******/ ])\n});\n;","import * as Phylocanvas from \"phylocanvas\";\n_.extend(window.bundleEntries || {}, {\n    load: function(options) {\n        var chart = options.chart;\n        var dataset = options.dataset;\n        var settings = options.chart.settings;\n        $.ajax( {\n            url     : dataset.download_url,\n            success : function( content ) {\n                try {\n                    var tree = Phylocanvas.default.createTree( options.target ),\n                        node_size = 20,\n                        text_size = 20,\n                        line_width = 2;\n\n                    // Set different properties of the tree\n                    tree.setTreeType( settings.get( 'tree_type' ) );\n                    // Set properties related to labels\n                    tree.showLabels = settings.get( 'show_labels' ) === \"true\" ? true : false;\n                    tree.alignLabels = settings.get( 'align_labels' ) === \"true\" ? true : false;\n                    // Set properties related to colors\n                    tree.branchColour = settings.get( 'edge_color' );\n                    tree.highlightColour = settings.get( 'highlighted_color' );\n                    tree.selectedColour = settings.get( 'selected_color' );\n                    // Set properties related to size\n                    tree.setNodeSize( node_size );\n                    tree.setTextSize( text_size );\n                    tree.lineWidth = line_width;\n                    // Show bootstrap confidence levels\n                    tree.showBootstrap = settings.get( 'show_bootstrap' ) === \"true\" ? true : false;\n                    tree.showInternalNodeLabels = tree.showBootstrap;\n                    // Update font and color for internal nodel labels\n                    tree.internalLabelStyle.colour = tree.branchColour;\n                    tree.internalLabelStyle.font = tree.font;\n                    tree.internalLabelStyle.textSize = tree.textSize;\n\n                    // Register click event on tree\n                    tree.on( 'click', function ( e ) {\n                        var node = tree.getNodeAtMousePosition( e );\n                        // Here collapse action is taking preference.\n                        // Whenver collapse and prune both are selected true,\n                        // collapse action will be performed\n                        // Collapse the selected branch\n                        if( settings.get( 'collapse_branch' ) === \"true\" ) {\n                            tree.branches[ node.id ].collapsed = true;\n                            tree.draw();\n                        }// Prune the selected branch\n                        else if( settings.get( 'prune_branch' ) === \"true\" ) {\n                            tree.branches[ node.id ].pruned = true;\n                            tree.draw();\n                        }\n                    });\n                    // Draw the phylogenetic tree\n                    tree.load( content );\n                    // Set node shape\n                    for(var j = 0, length = tree.leaves.length; j < length; j++) {\n                        tree.leaves[ j ].nodeShape = settings.get( 'node_shape' );\n                    }\n                    tree.draw();\n                    chart.state( 'ok', 'Done.' );\n                    options.process.resolve();\n                    // Adjust the size of tree on window resize\n                    $( window ).resize( function() {\n                        tree.fitInPanel( tree.leaves ); tree.draw();\n                    } );\n                } catch( err ) {\n                    chart.state( 'failed', err );\n                }\n            },\n            error: function() {\n                chart.state( 'failed', 'Failed to access dataset.' );\n                options.process.resolve();\n            }\n        });\n    }\n});\n"]}